%% coding: utf-8
{script,
    {"teamcowboygraphql","0.1.0"},
    [{preLoaded,
         [atomics,counters,erl_init,erl_prim_loader,erl_tracer,erlang,
          erts_code_purger,erts_dirty_process_signal_handler,erts_internal,
          erts_literal_area_collector,init,persistent_term,prim_buffer,
          prim_eval,prim_file,prim_inet,prim_net,prim_zip,socket,zlib]},
     {progress,preloaded},
     {path,["$ROOT/lib/kernel-6.5.1/ebin","$ROOT/lib/stdlib-3.11.2/ebin"]},
     {primLoad,
         [error_handler,application,application_controller,application_master,
          code,code_server,erl_eval,erl_lint,erl_parse,error_logger,ets,file,
          filename,file_server,file_io_server,gen,gen_event,gen_server,heart,
          kernel,logger,logger_filters,logger_server,logger_backend,
          logger_config,logger_simple_h,lists,proc_lib,supervisor]},
     {kernel_load_completed},
     {progress,kernel_load_completed},
     {path,["$ROOT/lib/kernel-6.5.1/ebin"]},
     {primLoad,
         [application_starter,auth,disk_log,disk_log_1,disk_log_server,
          disk_log_sup,dist_ac,dist_util,erl_boot_server,erl_compile_server,
          erl_ddll,erl_distribution,erl_epmd,erl_reply,erl_signal_handler,
          erts_debug,gen_sctp,gen_tcp,gen_udp,global,global_group,
          global_search,group,group_history,hipe_unified_loader,inet,
          inet6_sctp,inet6_tcp,inet6_tcp_dist,inet6_udp,inet_config,inet_db,
          inet_dns,inet_gethost_native,inet_hosts,inet_parse,inet_res,
          inet_sctp,inet_tcp,inet_tcp_dist,inet_udp,kernel_config,kernel_refc,
          local_tcp,local_udp,logger_disk_log_h,logger_formatter,
          logger_h_common,logger_handler_watcher,logger_olp,logger_proxy,
          logger_std_h,logger_sup,net,net_adm,net_kernel,os,pg2,ram_file,
          raw_file_io,raw_file_io_compressed,raw_file_io_deflate,
          raw_file_io_delayed,raw_file_io_inflate,raw_file_io_list,
          raw_file_io_raw,rpc,seq_trace,standard_error,user,user_drv,user_sup,
          wrap_log_reader]},
     {path,["$ROOT/lib/stdlib-3.11.2/ebin"]},
     {primLoad,
         [array,base64,beam_lib,binary,c,calendar,dets,dets_server,dets_sup,
          dets_utils,dets_v9,dict,digraph,digraph_utils,edlin,edlin_expand,
          epp,erl_abstract_code,erl_anno,erl_bits,erl_compile,erl_error,
          erl_expand_records,erl_internal,erl_posix_msg,erl_pp,erl_scan,
          erl_tar,error_logger_file_h,error_logger_tty_h,escript,eval_bits,
          file_sorter,filelib,gb_sets,gb_trees,gen_fsm,gen_statem,io,io_lib,
          io_lib_format,io_lib_fread,io_lib_pretty,log_mf_h,maps,math,
          ms_transform,orddict,ordsets,otp_internal,pool,proplists,qlc,qlc_pt,
          queue,rand,random,re,sets,shell,shell_default,slave,sofs,string,
          supervisor_bridge,sys,timer,unicode,unicode_util,uri_string,
          win32reg,zip]},
     {path,["$ROOT/lib/compiler-7.5.2/ebin"]},
     {primLoad,
         [beam_a,beam_asm,beam_block,beam_clean,beam_dict,beam_disasm,
          beam_except,beam_flatten,beam_jump,beam_kernel_to_ssa,beam_listing,
          beam_opcodes,beam_peep,beam_ssa,beam_ssa_bsm,beam_ssa_codegen,
          beam_ssa_dead,beam_ssa_funs,beam_ssa_lint,beam_ssa_opt,beam_ssa_pp,
          beam_ssa_pre_codegen,beam_ssa_recv,beam_ssa_share,beam_ssa_type,
          beam_trim,beam_utils,beam_validator,beam_z,cerl,cerl_clauses,
          cerl_inline,cerl_sets,cerl_trees,compile,core_lib,core_lint,
          core_parse,core_pp,core_scan,erl_bifs,rec_env,sys_core_alias,
          sys_core_bsm,sys_core_fold,sys_core_fold_lists,sys_core_inline,
          sys_pre_attributes,v3_core,v3_kernel,v3_kernel_pp]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/elixir-1.9.4/ebin"]},
     {primLoad,
         ['Elixir.Access','Elixir.Agent','Elixir.Agent.Server',
          'Elixir.Application','Elixir.ArgumentError',
          'Elixir.ArithmeticError','Elixir.Atom','Elixir.BadArityError',
          'Elixir.BadBooleanError','Elixir.BadFunctionError',
          'Elixir.BadMapError','Elixir.BadStructError','Elixir.Base',
          'Elixir.Behaviour','Elixir.Bitwise','Elixir.Calendar',
          'Elixir.Calendar.ISO','Elixir.Calendar.TimeZoneDatabase',
          'Elixir.Calendar.UTCOnlyTimeZoneDatabase','Elixir.CaseClauseError',
          'Elixir.Code','Elixir.Code.Formatter','Elixir.Code.Identifier',
          'Elixir.Code.LoadError','Elixir.Code.Typespec','Elixir.Collectable',
          'Elixir.Collectable.BitString','Elixir.Collectable.File.Stream',
          'Elixir.Collectable.HashDict','Elixir.Collectable.HashSet',
          'Elixir.Collectable.IO.Stream','Elixir.Collectable.List',
          'Elixir.Collectable.Map','Elixir.Collectable.MapSet',
          'Elixir.CompileError','Elixir.CondClauseError','Elixir.Config',
          'Elixir.Config.Provider','Elixir.Config.Reader','Elixir.Date',
          'Elixir.Date.Range','Elixir.DateTime','Elixir.Dict',
          'Elixir.DynamicSupervisor','Elixir.Enum','Elixir.Enum.EmptyError',
          'Elixir.Enum.OutOfBoundsError','Elixir.Enumerable',
          'Elixir.Enumerable.Date.Range','Elixir.Enumerable.File.Stream',
          'Elixir.Enumerable.Function','Elixir.Enumerable.GenEvent.Stream',
          'Elixir.Enumerable.HashDict','Elixir.Enumerable.HashSet',
          'Elixir.Enumerable.IO.Stream','Elixir.Enumerable.List',
          'Elixir.Enumerable.Map','Elixir.Enumerable.MapSet',
          'Elixir.Enumerable.Range','Elixir.Enumerable.Stream',
          'Elixir.ErlangError','Elixir.Exception','Elixir.File',
          'Elixir.File.CopyError','Elixir.File.Error','Elixir.File.LinkError',
          'Elixir.File.RenameError','Elixir.File.Stat','Elixir.File.Stream',
          'Elixir.Float','Elixir.Function','Elixir.FunctionClauseError',
          'Elixir.GenEvent','Elixir.GenEvent.Stream','Elixir.GenServer',
          'Elixir.HashDict','Elixir.HashSet','Elixir.IO','Elixir.IO.ANSI',
          'Elixir.IO.ANSI.Docs','Elixir.IO.ANSI.Sequence','Elixir.IO.Stream',
          'Elixir.IO.StreamError','Elixir.Inspect','Elixir.Inspect.Algebra',
          'Elixir.Inspect.Any','Elixir.Inspect.Atom',
          'Elixir.Inspect.BitString','Elixir.Inspect.Date',
          'Elixir.Inspect.Date.Range','Elixir.Inspect.DateTime',
          'Elixir.Inspect.Error','Elixir.Inspect.Float',
          'Elixir.Inspect.Function','Elixir.Inspect.HashDict',
          'Elixir.Inspect.HashSet','Elixir.Inspect.Integer',
          'Elixir.Inspect.List','Elixir.Inspect.Map','Elixir.Inspect.MapSet',
          'Elixir.Inspect.NaiveDateTime','Elixir.Inspect.Opts',
          'Elixir.Inspect.PID','Elixir.Inspect.Port','Elixir.Inspect.Range',
          'Elixir.Inspect.Reference','Elixir.Inspect.Regex',
          'Elixir.Inspect.Stream','Elixir.Inspect.Time',
          'Elixir.Inspect.Tuple','Elixir.Inspect.Version',
          'Elixir.Inspect.Version.Requirement','Elixir.Integer',
          'Elixir.Kernel','Elixir.Kernel.CLI','Elixir.Kernel.ErrorHandler',
          'Elixir.Kernel.LexicalTracker','Elixir.Kernel.ParallelCompiler',
          'Elixir.Kernel.ParallelRequire','Elixir.Kernel.SpecialForms',
          'Elixir.Kernel.Typespec','Elixir.Kernel.Utils','Elixir.KeyError',
          'Elixir.Keyword','Elixir.List','Elixir.List.Chars',
          'Elixir.List.Chars.Atom','Elixir.List.Chars.BitString',
          'Elixir.List.Chars.Float','Elixir.List.Chars.Integer',
          'Elixir.List.Chars.List','Elixir.Macro','Elixir.Macro.Env',
          'Elixir.Map','Elixir.MapSet','Elixir.MatchError','Elixir.Module',
          'Elixir.Module.LocalsTracker','Elixir.NaiveDateTime','Elixir.Node',
          'Elixir.OptionParser','Elixir.OptionParser.ParseError',
          'Elixir.Path','Elixir.Path.Wildcard','Elixir.Port','Elixir.Process',
          'Elixir.Protocol','Elixir.Protocol.UndefinedError','Elixir.Range',
          'Elixir.Record','Elixir.Record.Extractor','Elixir.Regex',
          'Elixir.Regex.CompileError','Elixir.Registry',
          'Elixir.Registry.Partition','Elixir.Registry.Supervisor',
          'Elixir.RuntimeError','Elixir.Set','Elixir.Stream',
          'Elixir.Stream.Reducers','Elixir.String','Elixir.String.Break',
          'Elixir.String.Casing','Elixir.String.Chars',
          'Elixir.String.Chars.Atom','Elixir.String.Chars.BitString',
          'Elixir.String.Chars.Date','Elixir.String.Chars.DateTime',
          'Elixir.String.Chars.Float','Elixir.String.Chars.Integer',
          'Elixir.String.Chars.List','Elixir.String.Chars.NaiveDateTime',
          'Elixir.String.Chars.Time','Elixir.String.Chars.URI',
          'Elixir.String.Chars.Version',
          'Elixir.String.Chars.Version.Requirement','Elixir.String.Tokenizer',
          'Elixir.String.Unicode','Elixir.StringIO','Elixir.Supervisor',
          'Elixir.Supervisor.Default','Elixir.Supervisor.Spec',
          'Elixir.SyntaxError','Elixir.System','Elixir.SystemLimitError',
          'Elixir.Task','Elixir.Task.Supervised','Elixir.Task.Supervisor',
          'Elixir.Time','Elixir.TokenMissingError','Elixir.TryClauseError',
          'Elixir.Tuple','Elixir.URI','Elixir.UndefinedFunctionError',
          'Elixir.UnicodeConversionError','Elixir.Version',
          'Elixir.Version.InvalidRequirementError',
          'Elixir.Version.InvalidVersionError','Elixir.Version.Parser',
          'Elixir.Version.Requirement','Elixir.WithClauseError',elixir,
          elixir_aliases,elixir_bitstring,elixir_bootstrap,elixir_clauses,
          elixir_code_server,elixir_compiler,elixir_config,elixir_def,
          elixir_dispatch,elixir_env,elixir_erl,elixir_erl_clauses,
          elixir_erl_compiler,elixir_erl_for,elixir_erl_pass,elixir_erl_try,
          elixir_erl_var,elixir_errors,elixir_expand,elixir_fn,elixir_import,
          elixir_interpolation,elixir_lexical,elixir_locals,elixir_map,
          elixir_module,elixir_overridable,elixir_parser,elixir_quote,
          elixir_rewrite,elixir_sup,elixir_tokenizer,elixir_utils]},
     {path,["$ROOT/lib/sasl-3.4.1/ebin"]},
     {primLoad,
         [alarm_handler,erlsrv,format_lib_supp,misc_supp,rb,rb_format_supp,
          release_handler,release_handler_1,sasl,sasl_report,
          sasl_report_file_h,sasl_report_tty_h,systools,systools_lib,
          systools_make,systools_rc,systools_relup]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/logger-1.9.4/ebin"]},
     {primLoad,
         ['Elixir.Logger','Elixir.Logger.App',
          'Elixir.Logger.BackendSupervisor','Elixir.Logger.Backends.Console',
          'Elixir.Logger.Config','Elixir.Logger.ErlangHandler',
          'Elixir.Logger.ErrorHandler','Elixir.Logger.Formatter',
          'Elixir.Logger.Translator','Elixir.Logger.Utils',
          'Elixir.Logger.Watcher']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/absinthe-1.4.13/ebin"]},
     {primLoad,
         ['Elixir.Absinthe','Elixir.Absinthe.Adapter',
          'Elixir.Absinthe.Adapter.LanguageConventions',
          'Elixir.Absinthe.Adapter.Passthrough',
          'Elixir.Absinthe.AnalysisError','Elixir.Absinthe.Blueprint',
          'Elixir.Absinthe.Blueprint.Directive',
          'Elixir.Absinthe.Blueprint.Document',
          'Elixir.Absinthe.Blueprint.Document.Field',
          'Elixir.Absinthe.Blueprint.Document.Fragment',
          'Elixir.Absinthe.Blueprint.Document.Fragment.Inline',
          'Elixir.Absinthe.Blueprint.Document.Fragment.Named',
          'Elixir.Absinthe.Blueprint.Document.Fragment.Named.Use',
          'Elixir.Absinthe.Blueprint.Document.Fragment.Spread',
          'Elixir.Absinthe.Blueprint.Document.Operation',
          'Elixir.Absinthe.Blueprint.Document.SourceLocation',
          'Elixir.Absinthe.Blueprint.Document.VariableDefinition',
          'Elixir.Absinthe.Blueprint.Draft',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Argument',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.BooleanValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Directive',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.DirectiveDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Document',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumValueDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Field',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FieldDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FloatValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Fragment',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FragmentSpread',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InlineFragment',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InputObjectTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InputValueDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.IntValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InterfaceTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ListType',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ListValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NamedType',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NonNullType',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NullValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectField',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.OperationDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ScalarTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.SchemaDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.StringValue',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.UnionTypeDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Variable',
          'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.VariableDefinition',
          'Elixir.Absinthe.Blueprint.Draft.Atom',
          'Elixir.Absinthe.Blueprint.Draft.List',
          'Elixir.Absinthe.Blueprint.Execution',
          'Elixir.Absinthe.Blueprint.Input',
          'Elixir.Absinthe.Blueprint.Input.Argument',
          'Elixir.Absinthe.Blueprint.Input.Boolean',
          'Elixir.Absinthe.Blueprint.Input.Enum',
          'Elixir.Absinthe.Blueprint.Input.Field',
          'Elixir.Absinthe.Blueprint.Input.Float',
          'Elixir.Absinthe.Blueprint.Input.Generated',
          'Elixir.Absinthe.Blueprint.Input.Integer',
          'Elixir.Absinthe.Blueprint.Input.List',
          'Elixir.Absinthe.Blueprint.Input.Null',
          'Elixir.Absinthe.Blueprint.Input.Object',
          'Elixir.Absinthe.Blueprint.Input.RawValue',
          'Elixir.Absinthe.Blueprint.Input.String',
          'Elixir.Absinthe.Blueprint.Input.Value',
          'Elixir.Absinthe.Blueprint.Input.Variable',
          'Elixir.Absinthe.Blueprint.Input.Variable.Use',
          'Elixir.Absinthe.Blueprint.Result.Leaf',
          'Elixir.Absinthe.Blueprint.Result.List',
          'Elixir.Absinthe.Blueprint.Result.Object',
          'Elixir.Absinthe.Blueprint.Schema',
          'Elixir.Absinthe.Blueprint.Schema.Deprecation',
          'Elixir.Absinthe.Blueprint.Schema.DirectiveDefinition',
          'Elixir.Absinthe.Blueprint.Schema.EnumTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.EnumValueDefinition',
          'Elixir.Absinthe.Blueprint.Schema.FieldDefinition',
          'Elixir.Absinthe.Blueprint.Schema.InputObjectTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.InputValueDefinition',
          'Elixir.Absinthe.Blueprint.Schema.InterfaceTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.ObjectTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.ScalarTypeDefinition',
          'Elixir.Absinthe.Blueprint.Schema.SchemaDefinition',
          'Elixir.Absinthe.Blueprint.Schema.UnionTypeDefinition',
          'Elixir.Absinthe.Blueprint.Transform',
          'Elixir.Absinthe.Blueprint.Transform.Builder',
          'Elixir.Absinthe.Blueprint.TypeReference',
          'Elixir.Absinthe.Blueprint.TypeReference.List',
          'Elixir.Absinthe.Blueprint.TypeReference.Name',
          'Elixir.Absinthe.Blueprint.TypeReference.NonNull',
          'Elixir.Absinthe.Complexity','Elixir.Absinthe.ExecutionError',
          'Elixir.Absinthe.Introspection',
          'Elixir.Absinthe.Introspection.Field',
          'Elixir.Absinthe.Introspection.Kind','Elixir.Absinthe.Language',
          'Elixir.Absinthe.Language.Argument',
          'Elixir.Absinthe.Language.BooleanValue',
          'Elixir.Absinthe.Language.Directive',
          'Elixir.Absinthe.Language.DirectiveDefinition',
          'Elixir.Absinthe.Language.Document',
          'Elixir.Absinthe.Language.EnumTypeDefinition',
          'Elixir.Absinthe.Language.EnumValue',
          'Elixir.Absinthe.Language.EnumValueDefinition',
          'Elixir.Absinthe.Language.Field',
          'Elixir.Absinthe.Language.FieldDefinition',
          'Elixir.Absinthe.Language.FloatValue',
          'Elixir.Absinthe.Language.Fragment',
          'Elixir.Absinthe.Language.FragmentSpread',
          'Elixir.Absinthe.Language.InlineFragment',
          'Elixir.Absinthe.Language.InputObjectTypeDefinition',
          'Elixir.Absinthe.Language.InputValueDefinition',
          'Elixir.Absinthe.Language.IntValue',
          'Elixir.Absinthe.Language.InterfaceTypeDefinition',
          'Elixir.Absinthe.Language.ListType',
          'Elixir.Absinthe.Language.ListValue',
          'Elixir.Absinthe.Language.NamedType',
          'Elixir.Absinthe.Language.NonNullType',
          'Elixir.Absinthe.Language.NullValue',
          'Elixir.Absinthe.Language.ObjectField',
          'Elixir.Absinthe.Language.ObjectTypeDefinition',
          'Elixir.Absinthe.Language.ObjectValue',
          'Elixir.Absinthe.Language.OperationDefinition',
          'Elixir.Absinthe.Language.ScalarTypeDefinition',
          'Elixir.Absinthe.Language.SchemaDefinition',
          'Elixir.Absinthe.Language.SelectionSet',
          'Elixir.Absinthe.Language.Source',
          'Elixir.Absinthe.Language.StringValue',
          'Elixir.Absinthe.Language.TypeExtensionDefinition',
          'Elixir.Absinthe.Language.UnionTypeDefinition',
          'Elixir.Absinthe.Language.Variable',
          'Elixir.Absinthe.Language.VariableDefinition',
          'Elixir.Absinthe.Logger','Elixir.Absinthe.Middleware',
          'Elixir.Absinthe.Middleware.Async',
          'Elixir.Absinthe.Middleware.Batch',
          'Elixir.Absinthe.Middleware.Dataloader',
          'Elixir.Absinthe.Middleware.MapGet',
          'Elixir.Absinthe.Middleware.PassParent','Elixir.Absinthe.Phase',
          'Elixir.Absinthe.Phase.Blueprint','Elixir.Absinthe.Phase.Debug',
          'Elixir.Absinthe.Phase.Document.Arguments.CoerceEnums',
          'Elixir.Absinthe.Phase.Document.Arguments.CoerceLists',
          'Elixir.Absinthe.Phase.Document.Arguments.Data',
          'Elixir.Absinthe.Phase.Document.Arguments.FlagInvalid',
          'Elixir.Absinthe.Phase.Document.Arguments.Normalize',
          'Elixir.Absinthe.Phase.Document.Arguments.Parse',
          'Elixir.Absinthe.Phase.Document.Complexity.Analysis',
          'Elixir.Absinthe.Phase.Document.Complexity.Result',
          'Elixir.Absinthe.Phase.Document.Context',
          'Elixir.Absinthe.Phase.Document.CurrentOperation',
          'Elixir.Absinthe.Phase.Document.Directives',
          'Elixir.Absinthe.Phase.Document.Execution.Resolution',
          'Elixir.Absinthe.Phase.Document.MissingLiterals',
          'Elixir.Absinthe.Phase.Document.MissingVariables',
          'Elixir.Absinthe.Phase.Document.Result',
          'Elixir.Absinthe.Phase.Document.Uses',
          'Elixir.Absinthe.Phase.Document.Validation.ArgumentsOfCorrectType',
          'Elixir.Absinthe.Phase.Document.Validation.FieldsOnCorrectType',
          'Elixir.Absinthe.Phase.Document.Validation.KnownArgumentNames',
          'Elixir.Absinthe.Phase.Document.Validation.KnownFragmentNames',
          'Elixir.Absinthe.Phase.Document.Validation.LoneAnonymousOperation',
          'Elixir.Absinthe.Phase.Document.Validation.NoFragmentCycles',
          'Elixir.Absinthe.Phase.Document.Validation.NoUndefinedVariables',
          'Elixir.Absinthe.Phase.Document.Validation.NoUnusedFragments',
          'Elixir.Absinthe.Phase.Document.Validation.NoUnusedVariables',
          'Elixir.Absinthe.Phase.Document.Validation.OnlyOneSubscription',
          'Elixir.Absinthe.Phase.Document.Validation.ProvidedAnOperation',
          'Elixir.Absinthe.Phase.Document.Validation.ProvidedNonNullArguments',
          'Elixir.Absinthe.Phase.Document.Validation.ProvidedNonNullVariables',
          'Elixir.Absinthe.Phase.Document.Validation.Result',
          'Elixir.Absinthe.Phase.Document.Validation.ScalarLeafs',
          'Elixir.Absinthe.Phase.Document.Validation.SelectedCurrentOperation',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueArgumentNames',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueFragmentNames',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueInputFieldNames',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueOperationNames',
          'Elixir.Absinthe.Phase.Document.Validation.UniqueVariableNames',
          'Elixir.Absinthe.Phase.Document.Validation.VariablesAreInputTypes',
          'Elixir.Absinthe.Phase.Document.Variables',
          'Elixir.Absinthe.Phase.Error','Elixir.Absinthe.Phase.Parse',
          'Elixir.Absinthe.Phase.Schema',
          'Elixir.Absinthe.Phase.Schema.Validation',
          'Elixir.Absinthe.Phase.Subscription.Result',
          'Elixir.Absinthe.Phase.Subscription.SubscribeSelf',
          'Elixir.Absinthe.Phase.Validation',
          'Elixir.Absinthe.Phase.Validation.Helpers',
          'Elixir.Absinthe.Phase.Validation.KnownDirectives',
          'Elixir.Absinthe.Phase.Validation.KnownTypeNames',
          'Elixir.Absinthe.Pipeline','Elixir.Absinthe.Pipeline.BatchResolver',
          'Elixir.Absinthe.Pipeline.ErrorResult','Elixir.Absinthe.Plugin',
          'Elixir.Absinthe.Resolution','Elixir.Absinthe.Resolution.Helpers',
          'Elixir.Absinthe.Resolution.Projector','Elixir.Absinthe.Schema',
          'Elixir.Absinthe.Schema.Error','Elixir.Absinthe.Schema.Notation',
          'Elixir.Absinthe.Schema.Notation.Definition',
          'Elixir.Absinthe.Schema.Notation.Error',
          'Elixir.Absinthe.Schema.Notation.Scope',
          'Elixir.Absinthe.Schema.Notation.Writer',
          'Elixir.Absinthe.Schema.Rule',
          'Elixir.Absinthe.Schema.Rule.DefaultEnumValuePresent',
          'Elixir.Absinthe.Schema.Rule.FieldImportsExist',
          'Elixir.Absinthe.Schema.Rule.InputOuputTypesCorrectlyPlaced',
          'Elixir.Absinthe.Schema.Rule.InterfacesMustResolveTypes',
          'Elixir.Absinthe.Schema.Rule.NoCircularFieldImports',
          'Elixir.Absinthe.Schema.Rule.ObjectInterfacesMustBeValid',
          'Elixir.Absinthe.Schema.Rule.ObjectMustImplementInterfaces',
          'Elixir.Absinthe.Schema.Rule.QueryTypeMustBeObject',
          'Elixir.Absinthe.Schema.Rule.TypeNamesAreReserved',
          'Elixir.Absinthe.Schema.Rule.TypeNamesAreUnique',
          'Elixir.Absinthe.Schema.Rule.TypeNamesAreValid',
          'Elixir.Absinthe.Schema.Verification',
          'Elixir.Absinthe.Schema.Verification.Unions',
          'Elixir.Absinthe.Subscription','Elixir.Absinthe.Subscription.Local',
          'Elixir.Absinthe.Subscription.Proxy',
          'Elixir.Absinthe.Subscription.ProxySupervisor',
          'Elixir.Absinthe.Subscription.Pubsub',
          'Elixir.Absinthe.Subscription.Registry',
          'Elixir.Absinthe.Subscription.Registry.Partition',
          'Elixir.Absinthe.Subscription.Registry.Supervisor',
          'Elixir.Absinthe.Subscription.Supervisor','Elixir.Absinthe.Test',
          'Elixir.Absinthe.Traversal','Elixir.Absinthe.Traversal.Node',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Language.Argument',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Language.Document',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Language.Field',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Language.Fragment',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Language.FragmentSpread',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Language.InlineFragment',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Language.OperationDefinition',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Language.SelectionSet',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Type.Argument',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Type.Field',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Type.InputObject',
          'Elixir.Absinthe.Traversal.Node.Absinthe.Type.Object',
          'Elixir.Absinthe.Traversal.Node.Any',
          'Elixir.Absinthe.Traversal.Node.Atom','Elixir.Absinthe.Type',
          'Elixir.Absinthe.Type.Argument','Elixir.Absinthe.Type.BuiltIns',
          'Elixir.Absinthe.Type.BuiltIns.Directives',
          'Elixir.Absinthe.Type.BuiltIns.Introspection',
          'Elixir.Absinthe.Type.BuiltIns.Scalars',
          'Elixir.Absinthe.Type.BuiltIns.Scalars.Utils',
          'Elixir.Absinthe.Type.Custom','Elixir.Absinthe.Type.Custom.Decimal',
          'Elixir.Absinthe.Type.Deprecation','Elixir.Absinthe.Type.Directive',
          'Elixir.Absinthe.Type.Enum','Elixir.Absinthe.Type.Enum.Value',
          'Elixir.Absinthe.Type.Fetch','Elixir.Absinthe.Type.Field',
          'Elixir.Absinthe.Type.InputObject','Elixir.Absinthe.Type.Interface',
          'Elixir.Absinthe.Type.List','Elixir.Absinthe.Type.NonNull',
          'Elixir.Absinthe.Type.Object','Elixir.Absinthe.Type.Reference',
          'Elixir.Absinthe.Type.Scalar','Elixir.Absinthe.Type.Union',
          'Elixir.Absinthe.Utils','Elixir.Absinthe.Utils.Suggestion',
          'Elixir.Inspect.Absinthe.Resolution',
          'Elixir.Mix.Tasks.Absinthe.Schema.Json',absinthe_lexer,
          absinthe_parser]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/eex-1.9.4/ebin"]},
     {primLoad,
         ['Elixir.EEx','Elixir.EEx.Compiler','Elixir.EEx.Engine',
          'Elixir.EEx.SmartEngine','Elixir.EEx.SyntaxError',
          'Elixir.EEx.Tokenizer']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/mime-1.6.0/ebin"]},
     {primLoad,['Elixir.MIME','Elixir.MIME.Application']},
     {path,["$ROOT/lib/crypto-4.6.4/ebin"]},
     {primLoad,[crypto,crypto_ec_curves]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/plug_crypto-1.2.2/ebin"]},
     {primLoad,
         ['Elixir.Plug.Crypto','Elixir.Plug.Crypto.Application',
          'Elixir.Plug.Crypto.KeyGenerator',
          'Elixir.Plug.Crypto.MessageEncryptor',
          'Elixir.Plug.Crypto.MessageVerifier']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/telemetry-0.4.3/ebin"]},
     {primLoad,
         [telemetry,telemetry_app,telemetry_handler_table,telemetry_sup]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/plug-1.11.1/ebin"]},
     {primLoad,
         ['Elixir.Collectable.Plug.Conn','Elixir.Inspect.Plug.Conn',
          'Elixir.Plug','Elixir.Plug.Adapters.Cowboy',
          'Elixir.Plug.Adapters.Cowboy2','Elixir.Plug.Adapters.Test.Conn',
          'Elixir.Plug.Application','Elixir.Plug.BadRequestError',
          'Elixir.Plug.BasicAuth','Elixir.Plug.Builder',
          'Elixir.Plug.CSRFProtection',
          'Elixir.Plug.CSRFProtection.InvalidCSRFTokenError',
          'Elixir.Plug.CSRFProtection.InvalidCrossOriginRequestError',
          'Elixir.Plug.Conn','Elixir.Plug.Conn.Adapter',
          'Elixir.Plug.Conn.AlreadySentError',
          'Elixir.Plug.Conn.CookieOverflowError','Elixir.Plug.Conn.Cookies',
          'Elixir.Plug.Conn.InvalidHeaderError',
          'Elixir.Plug.Conn.InvalidQueryError',
          'Elixir.Plug.Conn.NotSentError','Elixir.Plug.Conn.Query',
          'Elixir.Plug.Conn.Status','Elixir.Plug.Conn.Unfetched',
          'Elixir.Plug.Conn.Utils','Elixir.Plug.Conn.WrapperError',
          'Elixir.Plug.Debugger','Elixir.Plug.ErrorHandler',
          'Elixir.Plug.Exception','Elixir.Plug.Exception.Any',
          'Elixir.Plug.HTML','Elixir.Plug.Head','Elixir.Plug.Logger',
          'Elixir.Plug.MIME','Elixir.Plug.MethodOverride',
          'Elixir.Plug.Parsers','Elixir.Plug.Parsers.BadEncodingError',
          'Elixir.Plug.Parsers.JSON','Elixir.Plug.Parsers.MULTIPART',
          'Elixir.Plug.Parsers.ParseError',
          'Elixir.Plug.Parsers.RequestTooLargeError',
          'Elixir.Plug.Parsers.URLENCODED',
          'Elixir.Plug.Parsers.UnsupportedMediaTypeError',
          'Elixir.Plug.RequestId','Elixir.Plug.RewriteOn',
          'Elixir.Plug.Router','Elixir.Plug.Router.InvalidSpecError',
          'Elixir.Plug.Router.MalformedURIError','Elixir.Plug.Router.Utils',
          'Elixir.Plug.SSL','Elixir.Plug.Session',
          'Elixir.Plug.Session.COOKIE','Elixir.Plug.Session.ETS',
          'Elixir.Plug.Session.Store','Elixir.Plug.Static',
          'Elixir.Plug.Static.InvalidPathError','Elixir.Plug.Telemetry',
          'Elixir.Plug.Test','Elixir.Plug.TimeoutError','Elixir.Plug.Upload',
          'Elixir.Plug.UploadError',plug_multipart]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/absinthe_plug-1.4.6/ebin"]},
     {primLoad,
         ['Elixir.Absinthe.GraphiQL.Validation.NoSubscriptionOnHTTP',
          'Elixir.Absinthe.Plug','Elixir.Absinthe.Plug.Batch.Runner',
          'Elixir.Absinthe.Plug.DocumentProvider',
          'Elixir.Absinthe.Plug.DocumentProvider.Compiled',
          'Elixir.Absinthe.Plug.DocumentProvider.Compiled.Check',
          'Elixir.Absinthe.Plug.DocumentProvider.Compiled.Writer',
          'Elixir.Absinthe.Plug.DocumentProvider.Default',
          'Elixir.Absinthe.Plug.GraphiQL',
          'Elixir.Absinthe.Plug.GraphiQL.Assets',
          'Elixir.Absinthe.Plug.Parser','Elixir.Absinthe.Plug.Request',
          'Elixir.Absinthe.Plug.Request.Query','Elixir.Absinthe.Plug.Types',
          'Elixir.Absinthe.Plug.Validation.HTTPMethod',
          'Elixir.Mix.Absinthe.Plug.GraphiQL.AssetsTask',
          'Elixir.Mix.Tasks.Absinthe.Plug.Graphiql.Assets.Download',
          'Elixir.Mix.Tasks.Absinthe.Plug.Graphiql.Assets.Remove']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/cors_plug-2.0.0/ebin"]},
     {primLoad,['Elixir.CORSPlug']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/dataloader-1.0.8/ebin"]},
     {primLoad,
         ['Elixir.Dataloader','Elixir.Dataloader.GetError',
          'Elixir.Dataloader.KV','Elixir.Dataloader.Source',
          'Elixir.Dataloader.Source.Dataloader.KV']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/gettext-0.16.1/ebin"]},
     {primLoad,
         ['Elixir.Gettext','Elixir.Gettext.Application',
          'Elixir.Gettext.Backend','Elixir.Gettext.Compiler',
          'Elixir.Gettext.Error','Elixir.Gettext.Extractor',
          'Elixir.Gettext.ExtractorAgent','Elixir.Gettext.Fuzzy',
          'Elixir.Gettext.Interpolation','Elixir.Gettext.Merger',
          'Elixir.Gettext.MissingBindingsError','Elixir.Gettext.PO',
          'Elixir.Gettext.PO.Parser','Elixir.Gettext.PO.PluralTranslation',
          'Elixir.Gettext.PO.SyntaxError','Elixir.Gettext.PO.Tokenizer',
          'Elixir.Gettext.PO.Translation','Elixir.Gettext.PO.Translations',
          'Elixir.Gettext.Plural','Elixir.Gettext.Plural.UnknownLocaleError',
          'Elixir.Mix.Tasks.Compile.Gettext',
          'Elixir.Mix.Tasks.Gettext.Extract','Elixir.Mix.Tasks.Gettext.Merge',
          gettext_po_parser]},
     {path,["$ROOT/lib/asn1-5.0.9/ebin"]},
     {primLoad,[asn1rt_nif]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/certifi-2.6.1/ebin"]},
     {primLoad,[certifi,certifi_pt]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/unicode_util_compat-0.7.0/ebin"]},
     {primLoad,[string_compat,unicode_util_compat]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/idna-6.1.1/ebin"]},
     {primLoad,
         [idna,idna_bidi,idna_context,idna_data,idna_mapping,idna_table,
          idna_ucs,punycode]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/metrics-1.0.1/ebin"]},
     {primLoad,[metrics,metrics_dummy,metrics_exometer,metrics_folsom]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/mimerl-1.2.0/ebin"]},
     {primLoad,[mimerl]},
     {path,["$ROOT/lib/syntax_tools-2.2.1/ebin"]},
     {primLoad,
         [epp_dodger,erl_comment_scan,erl_prettypr,erl_recomment,erl_syntax,
          erl_syntax_lib,erl_tidy,igor,merl,merl_transform,prettypr]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/parse_trans-3.3.1/ebin"]},
     {primLoad,
         [ct_expand,exprecs,parse_trans,parse_trans_codegen,parse_trans_mod,
          parse_trans_pp]},
     {path,["$ROOT/lib/public_key-1.7.1/ebin"]},
     {primLoad,
         ['OTP-PUB-KEY','PKCS-FRAME',pubkey_cert,pubkey_cert_records,
          pubkey_crl,pubkey_pbe,pubkey_pem,pubkey_ssh,public_key]},
     {path,["$ROOT/lib/ssl-9.5.3/ebin"]},
     {primLoad,
         [dtls_connection,dtls_connection_sup,dtls_handshake,
          dtls_listener_sup,dtls_packet_demux,dtls_record,dtls_socket,
          dtls_sup,dtls_v1,inet6_tls_dist,inet_tls_dist,ssl,ssl_admin_sup,
          ssl_alert,ssl_app,ssl_certificate,ssl_cipher,ssl_cipher_format,
          ssl_config,ssl_connection,ssl_connection_sup,ssl_crl,ssl_crl_cache,
          ssl_crl_cache_api,ssl_crl_hash_dir,ssl_dh_groups,ssl_dist_admin_sup,
          ssl_dist_connection_sup,ssl_dist_sup,ssl_handshake,
          ssl_listen_tracker_sup,ssl_logger,ssl_manager,ssl_pem_cache,
          ssl_pkix_db,ssl_record,ssl_session,ssl_session_cache,
          ssl_session_cache_api,ssl_srp_primes,ssl_sup,ssl_v3,
          tls_bloom_filter,tls_client_ticket_store,tls_connection,
          tls_connection_1_3,tls_connection_sup,tls_handshake,
          tls_handshake_1_3,tls_record,tls_record_1_3,tls_sender,
          tls_server_session_ticket,tls_server_session_ticket_sup,
          tls_server_sup,tls_socket,tls_sup,tls_v1]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/ssl_verify_fun-1.1.6/ebin"]},
     {primLoad,
         [ssl_verify_fingerprint,ssl_verify_fun_cert_helpers,
          ssl_verify_fun_encodings,ssl_verify_hostname,ssl_verify_pk,
          ssl_verify_string,ssl_verify_util]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/hackney-1.17.4/ebin"]},
     {primLoad,
         [hackney,hackney_app,hackney_bstr,hackney_connect,hackney_connection,
          hackney_connections,hackney_cookie,hackney_date,hackney_headers,
          hackney_headers_new,hackney_http,hackney_http_connect,
          hackney_local_tcp,hackney_manager,hackney_metrics,hackney_multipart,
          hackney_pool,hackney_pool_handler,hackney_request,hackney_response,
          hackney_socks5,hackney_ssl,hackney_ssl_certificate,hackney_stream,
          hackney_sup,hackney_tcp,hackney_trace,hackney_url,hackney_util]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/httpoison-1.8.0/ebin"]},
     {primLoad,
         ['Elixir.HTTPoison','Elixir.HTTPoison.AsyncChunk',
          'Elixir.HTTPoison.AsyncEnd','Elixir.HTTPoison.AsyncHeaders',
          'Elixir.HTTPoison.AsyncRedirect','Elixir.HTTPoison.AsyncResponse',
          'Elixir.HTTPoison.AsyncStatus','Elixir.HTTPoison.Base',
          'Elixir.HTTPoison.Error','Elixir.HTTPoison.Handlers.Multipart',
          'Elixir.HTTPoison.MaybeRedirect','Elixir.HTTPoison.Request',
          'Elixir.HTTPoison.Response']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/jason-1.2.2/ebin"]},
     {primLoad,
         ['Elixir.Jason','Elixir.Jason.Codegen','Elixir.Jason.DecodeError',
          'Elixir.Jason.Decoder','Elixir.Jason.Decoder.Unescape',
          'Elixir.Jason.Encode','Elixir.Jason.EncodeError',
          'Elixir.Jason.Encoder','Elixir.Jason.Encoder.Any',
          'Elixir.Jason.Encoder.Atom','Elixir.Jason.Encoder.BitString',
          'Elixir.Jason.Encoder.Date','Elixir.Jason.Encoder.DateTime',
          'Elixir.Jason.Encoder.Decimal','Elixir.Jason.Encoder.Float',
          'Elixir.Jason.Encoder.Integer',
          'Elixir.Jason.Encoder.Jason.Fragment','Elixir.Jason.Encoder.List',
          'Elixir.Jason.Encoder.Map','Elixir.Jason.Encoder.NaiveDateTime',
          'Elixir.Jason.Encoder.Time','Elixir.Jason.Formatter',
          'Elixir.Jason.Fragment','Elixir.Jason.Helpers']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phoenix_pubsub-2.0.0/ebin"]},
     {primLoad,
         ['Elixir.Phoenix.PubSub','Elixir.Phoenix.PubSub.Adapter',
          'Elixir.Phoenix.PubSub.Application',
          'Elixir.Phoenix.PubSub.BroadcastError','Elixir.Phoenix.PubSub.PG2',
          'Elixir.Phoenix.PubSub.Supervisor','Elixir.Phoenix.Tracker',
          'Elixir.Phoenix.Tracker.Clock',
          'Elixir.Phoenix.Tracker.DeltaGeneration',
          'Elixir.Phoenix.Tracker.Replica','Elixir.Phoenix.Tracker.Shard',
          'Elixir.Phoenix.Tracker.State']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/phoenix-1.5.9/ebin"]},
     {primLoad,
         ['Elixir.Mix.Phoenix','Elixir.Mix.Phoenix.Context',
          'Elixir.Mix.Phoenix.Schema','Elixir.Mix.Tasks.Compile.Phoenix',
          'Elixir.Mix.Tasks.Phx','Elixir.Mix.Tasks.Phx.Digest',
          'Elixir.Mix.Tasks.Phx.Digest.Clean','Elixir.Mix.Tasks.Phx.Gen.Cert',
          'Elixir.Mix.Tasks.Phx.Gen.Channel',
          'Elixir.Mix.Tasks.Phx.Gen.Context',
          'Elixir.Mix.Tasks.Phx.Gen.Embedded','Elixir.Mix.Tasks.Phx.Gen.Html',
          'Elixir.Mix.Tasks.Phx.Gen.Json','Elixir.Mix.Tasks.Phx.Gen.Live',
          'Elixir.Mix.Tasks.Phx.Gen.Presence',
          'Elixir.Mix.Tasks.Phx.Gen.Schema','Elixir.Mix.Tasks.Phx.Gen.Secret',
          'Elixir.Mix.Tasks.Phx.Routes','Elixir.Mix.Tasks.Phx.Server',
          'Elixir.Phoenix','Elixir.Phoenix.ActionClauseError',
          'Elixir.Phoenix.Channel','Elixir.Phoenix.Channel.Server',
          'Elixir.Phoenix.ChannelTest',
          'Elixir.Phoenix.ChannelTest.NoopSerializer',
          'Elixir.Phoenix.CodeReloader','Elixir.Phoenix.CodeReloader.Proxy',
          'Elixir.Phoenix.CodeReloader.Server','Elixir.Phoenix.Config',
          'Elixir.Phoenix.ConnTest','Elixir.Phoenix.Controller',
          'Elixir.Phoenix.Controller.Pipeline','Elixir.Phoenix.Digester',
          'Elixir.Phoenix.Endpoint','Elixir.Phoenix.Endpoint.Cowboy2Adapter',
          'Elixir.Phoenix.Endpoint.Cowboy2Handler',
          'Elixir.Phoenix.Endpoint.CowboyAdapter',
          'Elixir.Phoenix.Endpoint.CowboyWebSocket',
          'Elixir.Phoenix.Endpoint.RenderErrors',
          'Elixir.Phoenix.Endpoint.Supervisor',
          'Elixir.Phoenix.Endpoint.Watcher','Elixir.Phoenix.Logger',
          'Elixir.Phoenix.MissingParamError','Elixir.Phoenix.Naming',
          'Elixir.Phoenix.NotAcceptableError','Elixir.Phoenix.Param',
          'Elixir.Phoenix.Param.Any','Elixir.Phoenix.Param.Atom',
          'Elixir.Phoenix.Param.BitString','Elixir.Phoenix.Param.Integer',
          'Elixir.Phoenix.Param.Map','Elixir.Phoenix.Presence',
          'Elixir.Phoenix.Presence.Tracker','Elixir.Phoenix.Router',
          'Elixir.Phoenix.Router.ConsoleFormatter',
          'Elixir.Phoenix.Router.Helpers',
          'Elixir.Phoenix.Router.MalformedURIError',
          'Elixir.Phoenix.Router.NoRouteError',
          'Elixir.Phoenix.Router.Resource','Elixir.Phoenix.Router.Route',
          'Elixir.Phoenix.Router.Scope','Elixir.Phoenix.Socket',
          'Elixir.Phoenix.Socket.Broadcast',
          'Elixir.Phoenix.Socket.InvalidMessageError',
          'Elixir.Phoenix.Socket.Message',
          'Elixir.Phoenix.Socket.PoolSupervisor',
          'Elixir.Phoenix.Socket.Reply','Elixir.Phoenix.Socket.Serializer',
          'Elixir.Phoenix.Socket.Transport',
          'Elixir.Phoenix.Socket.V1.JSONSerializer',
          'Elixir.Phoenix.Socket.V2.JSONSerializer','Elixir.Phoenix.Template',
          'Elixir.Phoenix.Template.EExEngine',
          'Elixir.Phoenix.Template.Engine',
          'Elixir.Phoenix.Template.ExsEngine',
          'Elixir.Phoenix.Template.UndefinedError','Elixir.Phoenix.Token',
          'Elixir.Phoenix.Transports.LongPoll',
          'Elixir.Phoenix.Transports.LongPoll.Server',
          'Elixir.Phoenix.Transports.WebSocket','Elixir.Phoenix.View',
          'Elixir.Plug.Exception.Phoenix.ActionClauseError']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/cowlib-2.11.0/ebin"]},
     {primLoad,
         [cow_base64url,cow_cookie,cow_date,cow_hpack,cow_http,cow_http2,
          cow_http2_machine,cow_http_hd,cow_http_struct_hd,cow_http_te,
          cow_iolists,cow_link,cow_mimetypes,cow_multipart,cow_qs,cow_spdy,
          cow_sse,cow_uri,cow_uri_template,cow_ws]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/ranch-1.8.0/ebin"]},
     {primLoad,
         [ranch,ranch_acceptor,ranch_acceptors_sup,ranch_app,ranch_conns_sup,
          ranch_crc32c,ranch_listener_sup,ranch_protocol,ranch_proxy_header,
          ranch_server,ranch_ssl,ranch_sup,ranch_tcp,ranch_transport]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/cowboy-2.9.0/ebin"]},
     {primLoad,
         [cowboy,cowboy_app,cowboy_bstr,cowboy_children,cowboy_clear,
          cowboy_clock,cowboy_compress_h,cowboy_constraints,cowboy_handler,
          cowboy_http,cowboy_http2,cowboy_loop,cowboy_metrics_h,
          cowboy_middleware,cowboy_req,cowboy_rest,cowboy_router,
          cowboy_static,cowboy_stream,cowboy_stream_h,cowboy_sub_protocol,
          cowboy_sup,cowboy_tls,cowboy_tracer_h,cowboy_websocket]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/cowboy_telemetry-0.3.1/ebin"]},
     {primLoad,[cowboy_telemetry_h]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/plug_cowboy-2.5.0/ebin"]},
     {primLoad,
         ['Elixir.Plug.Cowboy','Elixir.Plug.Cowboy.Conn',
          'Elixir.Plug.Cowboy.Drainer','Elixir.Plug.Cowboy.Handler',
          'Elixir.Plug.Cowboy.Translator']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/poison-2.1.0/ebin"]},
     {primLoad,
         ['Elixir.Poison','Elixir.Poison.Decode','Elixir.Poison.Decoder',
          'Elixir.Poison.Decoder.Any','Elixir.Poison.Encode',
          'Elixir.Poison.EncodeError','Elixir.Poison.Encoder',
          'Elixir.Poison.Encoder.Any','Elixir.Poison.Encoder.Atom',
          'Elixir.Poison.Encoder.BitString','Elixir.Poison.Encoder.Float',
          'Elixir.Poison.Encoder.HashDict','Elixir.Poison.Encoder.HashSet',
          'Elixir.Poison.Encoder.Integer','Elixir.Poison.Encoder.List',
          'Elixir.Poison.Encoder.Map','Elixir.Poison.Encoder.Range',
          'Elixir.Poison.Encoder.Stream','Elixir.Poison.Parser',
          'Elixir.Poison.Pretty','Elixir.Poison.SyntaxError']},
     {path,["$ROOT/lib/runtime_tools-1.14/ebin"]},
     {primLoad,
         [appmon_info,dbg,dyntrace,erts_alloc_config,msacc,observer_backend,
          runtime_tools,runtime_tools_sup,scheduler,system_information,
          ttb_autostart]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/telemetry_metrics-0.6.0/ebin"]},
     {primLoad,
         ['Elixir.Telemetry.Metrics',
          'Elixir.Telemetry.Metrics.ConsoleReporter',
          'Elixir.Telemetry.Metrics.Counter',
          'Elixir.Telemetry.Metrics.Distribution',
          'Elixir.Telemetry.Metrics.LastValue','Elixir.Telemetry.Metrics.Sum',
          'Elixir.Telemetry.Metrics.Summary']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/telemetry_poller-0.5.1/ebin"]},
     {primLoad,
         [telemetry_poller,telemetry_poller_app,telemetry_poller_builtin,
          telemetry_poller_sup]},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/teamcowboygraphql-0.1.0/ebin"]},
     {primLoad,
         ['Elixir.TeamCowboyGraphQL','Elixir.TeamCowboyGraphQL.Application',
          'Elixir.TeamCowboyGraphQL.Client',
          'Elixir.TeamCowboyGraphQL.Client.Auth',
          'Elixir.TeamCowboyGraphQL.Client.Event',
          'Elixir.TeamCowboyGraphQL.Client.Event.SaveRsvpParams',
          'Elixir.TeamCowboyGraphQL.Client.Team',
          'Elixir.TeamCowboyGraphQL.Client.User',
          'Elixir.TeamCowboyGraphQL.Data.Api.RequestParameters',
          'Elixir.TeamCowboyGraphQL.Data.Api.RequestSignature',
          'Elixir.TeamCowboyGraphQL.Data.Api.TeamCowboyResponse',
          'Elixir.TeamCowboyGraphQL.Data.Normalization.TeamCowboy.Events',
          'Elixir.TeamCowboyGraphQL.Data.Normalization.TeamCowboy.Locations',
          'Elixir.TeamCowboyGraphQL.Data.Normalization.TeamCowboy.Teams',
          'Elixir.TeamCowboyGraphQL.Data.Normalization.TeamCowboy.Users',
          'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.Event',
          'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.Location',
          'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.Team',
          'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.User',
          'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.UserToken',
          'Elixir.TeamCowboyGraphQL.Fetchers.Events',
          'Elixir.TeamCowboyGraphQL.Repos.Events',
          'Elixir.TeamCowboyGraphQL.Savers.Events',
          'Elixir.TeamCowboyGraphQLWeb','Elixir.TeamCowboyGraphQLWeb.Context',
          'Elixir.TeamCowboyGraphQLWeb.Endpoint',
          'Elixir.TeamCowboyGraphQLWeb.ErrorHelpers',
          'Elixir.TeamCowboyGraphQLWeb.ErrorView',
          'Elixir.TeamCowboyGraphQLWeb.Gettext',
          'Elixir.TeamCowboyGraphQLWeb.Loaders.Teams',
          'Elixir.TeamCowboyGraphQLWeb.Resolvers.Events',
          'Elixir.TeamCowboyGraphQLWeb.Resolvers.Teams',
          'Elixir.TeamCowboyGraphQLWeb.Resolvers.Users',
          'Elixir.TeamCowboyGraphQLWeb.Router',
          'Elixir.TeamCowboyGraphQLWeb.Router.Helpers',
          'Elixir.TeamCowboyGraphQLWeb.Schema',
          'Elixir.TeamCowboyGraphQLWeb.Telemetry']},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$RELEASE_LIB/iex-1.9.4/ebin"]},
     {primLoad,
         ['Elixir.IEx','Elixir.IEx.App','Elixir.IEx.Autocomplete',
          'Elixir.IEx.Broker','Elixir.IEx.CLI','Elixir.IEx.Config',
          'Elixir.IEx.Evaluator','Elixir.IEx.Helpers','Elixir.IEx.History',
          'Elixir.IEx.Info','Elixir.IEx.Info.Any','Elixir.IEx.Info.Atom',
          'Elixir.IEx.Info.BitString','Elixir.IEx.Info.Date',
          'Elixir.IEx.Info.Float','Elixir.IEx.Info.Function',
          'Elixir.IEx.Info.Integer','Elixir.IEx.Info.List',
          'Elixir.IEx.Info.Map','Elixir.IEx.Info.NaiveDateTime',
          'Elixir.IEx.Info.PID','Elixir.IEx.Info.Port',
          'Elixir.IEx.Info.Reference','Elixir.IEx.Info.Time',
          'Elixir.IEx.Info.Tuple','Elixir.IEx.Introspection','Elixir.IEx.Pry',
          'Elixir.IEx.Server','Elixir.IEx.State']},
     {progress,modules_loaded},
     {path,
         ["$RELEASE_LIB/../releases/0.1.0/consolidated",
          "$ROOT/lib/kernel-6.5.1/ebin","$ROOT/lib/stdlib-3.11.2/ebin",
          "$ROOT/lib/compiler-7.5.2/ebin","$RELEASE_LIB/elixir-1.9.4/ebin",
          "$ROOT/lib/sasl-3.4.1/ebin","$RELEASE_LIB/logger-1.9.4/ebin",
          "$RELEASE_LIB/absinthe-1.4.13/ebin","$RELEASE_LIB/eex-1.9.4/ebin",
          "$RELEASE_LIB/mime-1.6.0/ebin","$ROOT/lib/crypto-4.6.4/ebin",
          "$RELEASE_LIB/plug_crypto-1.2.2/ebin",
          "$RELEASE_LIB/telemetry-0.4.3/ebin","$RELEASE_LIB/plug-1.11.1/ebin",
          "$RELEASE_LIB/absinthe_plug-1.4.6/ebin",
          "$RELEASE_LIB/cors_plug-2.0.0/ebin",
          "$RELEASE_LIB/dataloader-1.0.8/ebin",
          "$RELEASE_LIB/gettext-0.16.1/ebin","$ROOT/lib/asn1-5.0.9/ebin",
          "$RELEASE_LIB/certifi-2.6.1/ebin",
          "$RELEASE_LIB/unicode_util_compat-0.7.0/ebin",
          "$RELEASE_LIB/idna-6.1.1/ebin","$RELEASE_LIB/metrics-1.0.1/ebin",
          "$RELEASE_LIB/mimerl-1.2.0/ebin",
          "$ROOT/lib/syntax_tools-2.2.1/ebin",
          "$RELEASE_LIB/parse_trans-3.3.1/ebin",
          "$ROOT/lib/public_key-1.7.1/ebin","$ROOT/lib/ssl-9.5.3/ebin",
          "$RELEASE_LIB/ssl_verify_fun-1.1.6/ebin",
          "$RELEASE_LIB/hackney-1.17.4/ebin",
          "$RELEASE_LIB/httpoison-1.8.0/ebin","$RELEASE_LIB/jason-1.2.2/ebin",
          "$RELEASE_LIB/phoenix_pubsub-2.0.0/ebin",
          "$RELEASE_LIB/phoenix-1.5.9/ebin","$RELEASE_LIB/cowlib-2.11.0/ebin",
          "$RELEASE_LIB/ranch-1.8.0/ebin","$RELEASE_LIB/cowboy-2.9.0/ebin",
          "$RELEASE_LIB/cowboy_telemetry-0.3.1/ebin",
          "$RELEASE_LIB/plug_cowboy-2.5.0/ebin",
          "$RELEASE_LIB/poison-2.1.0/ebin",
          "$ROOT/lib/runtime_tools-1.14/ebin",
          "$RELEASE_LIB/telemetry_metrics-0.6.0/ebin",
          "$RELEASE_LIB/telemetry_poller-0.5.1/ebin",
          "$RELEASE_LIB/teamcowboygraphql-0.1.0/ebin",
          "$RELEASE_LIB/iex-1.9.4/ebin"]},
     {kernelProcess,heart,{heart,start,[]}},
     {kernelProcess,logger,{logger_server,start_link,[]}},
     {kernelProcess,application_controller,
         {application_controller,start,
             [{application,kernel,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"6.5.1"},
                   {id,[]},
                   {modules,
                       [application,application_controller,application_master,
                        application_starter,auth,code,code_server,dist_util,
                        erl_boot_server,erl_compile_server,erl_distribution,
                        erl_reply,erl_signal_handler,error_handler,
                        error_logger,file,file_server,file_io_server,global,
                        global_group,global_search,group,group_history,heart,
                        hipe_unified_loader,inet6_tcp,inet6_tcp_dist,
                        inet6_udp,inet6_sctp,inet_config,inet_hosts,
                        inet_gethost_native,inet_tcp_dist,kernel,
                        kernel_config,kernel_refc,local_tcp,local_udp,logger,
                        logger_backend,logger_config,logger_disk_log_h,
                        logger_filters,logger_formatter,logger_h_common,
                        logger_handler_watcher,logger_olp,logger_proxy,
                        logger_server,logger_simple_h,logger_std_h,logger_sup,
                        net,net_adm,net_kernel,os,ram_file,rpc,user,user_drv,
                        user_sup,disk_log,disk_log_1,disk_log_server,
                        disk_log_sup,dist_ac,erl_ddll,erl_epmd,erts_debug,
                        gen_tcp,gen_udp,gen_sctp,inet,inet_db,inet_dns,
                        inet_parse,inet_res,inet_tcp,inet_udp,inet_sctp,pg2,
                        raw_file_io,raw_file_io_compressed,
                        raw_file_io_deflate,raw_file_io_delayed,
                        raw_file_io_inflate,raw_file_io_list,raw_file_io_raw,
                        seq_trace,standard_error,wrap_log_reader]},
                   {registered,
                       [application_controller,erl_reply,auth,boot_server,
                        code_server,disk_log_server,disk_log_sup,
                        erl_prim_loader,error_logger,file_server_2,
                        fixtable_server,global_group,global_name_server,heart,
                        init,kernel_config,kernel_refc,kernel_sup,logger,
                        logger_handler_watcher,logger_sup,net_kernel,net_sup,
                        rex,user,os_server,ddll_server,erl_epmd,inet_db,pg2]},
                   {applications,[]},
                   {included_applications,[]},
                   {env,
                       [{logger_level,notice},{logger_sasl_compatible,false}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{kernel,[]}}]}]}},
     {progress,init_kernel_started},
     {apply,
         {application,load,
             [{application,stdlib,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"3.11.2"},
                   {id,[]},
                   {modules,
                       [array,base64,beam_lib,binary,c,calendar,dets,
                        dets_server,dets_sup,dets_utils,dets_v9,dict,digraph,
                        digraph_utils,edlin,edlin_expand,epp,eval_bits,
                        erl_abstract_code,erl_anno,erl_bits,erl_compile,
                        erl_error,erl_eval,erl_expand_records,erl_internal,
                        erl_lint,erl_parse,erl_posix_msg,erl_pp,erl_scan,
                        erl_tar,error_logger_file_h,error_logger_tty_h,
                        escript,ets,file_sorter,filelib,filename,gb_trees,
                        gb_sets,gen,gen_event,gen_fsm,gen_server,gen_statem,
                        io,io_lib,io_lib_format,io_lib_fread,io_lib_pretty,
                        lists,log_mf_h,maps,math,ms_transform,orddict,ordsets,
                        otp_internal,pool,proc_lib,proplists,qlc,qlc_pt,queue,
                        rand,random,re,sets,shell,shell_default,slave,sofs,
                        string,supervisor,supervisor_bridge,sys,timer,unicode,
                        unicode_util,uri_string,win32reg,zip]},
                   {registered,
                       [timer_server,rsh_starter,take_over_monitor,
                        pool_master,dets]},
                   {applications,[kernel]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,compiler,
                  [{description,"ERTS  CXC 138 10"},
                   {vsn,"7.5.2"},
                   {id,[]},
                   {modules,
                       [beam_a,beam_asm,beam_block,beam_clean,beam_dict,
                        beam_disasm,beam_except,beam_flatten,beam_jump,
                        beam_kernel_to_ssa,beam_listing,beam_opcodes,
                        beam_peep,beam_ssa,beam_ssa_bsm,beam_ssa_codegen,
                        beam_ssa_dead,beam_ssa_funs,beam_ssa_lint,
                        beam_ssa_opt,beam_ssa_pp,beam_ssa_pre_codegen,
                        beam_ssa_recv,beam_ssa_share,beam_ssa_type,beam_trim,
                        beam_utils,beam_validator,beam_z,cerl,cerl_clauses,
                        cerl_inline,cerl_sets,cerl_trees,compile,core_scan,
                        core_lint,core_parse,core_pp,core_lib,erl_bifs,
                        rec_env,sys_core_alias,sys_core_bsm,sys_core_fold,
                        sys_core_fold_lists,sys_core_inline,
                        sys_pre_attributes,v3_core,v3_kernel,v3_kernel_pp]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,elixir,
                  [{description,"elixir"},
                   {vsn,"1.9.4"},
                   {id,[]},
                   {modules,
                       ['Elixir.Access','Elixir.Agent.Server','Elixir.Agent',
                        'Elixir.Application','Elixir.ArgumentError',
                        'Elixir.ArithmeticError','Elixir.Atom',
                        'Elixir.BadArityError','Elixir.BadBooleanError',
                        'Elixir.BadFunctionError','Elixir.BadMapError',
                        'Elixir.BadStructError','Elixir.Base',
                        'Elixir.Behaviour','Elixir.Bitwise',
                        'Elixir.Calendar.ISO',
                        'Elixir.Calendar.TimeZoneDatabase',
                        'Elixir.Calendar.UTCOnlyTimeZoneDatabase',
                        'Elixir.Calendar','Elixir.CaseClauseError',
                        'Elixir.Code.Formatter','Elixir.Code.Identifier',
                        'Elixir.Code.LoadError','Elixir.Code.Typespec',
                        'Elixir.Code','Elixir.Collectable.BitString',
                        'Elixir.Collectable.File.Stream',
                        'Elixir.Collectable.HashDict',
                        'Elixir.Collectable.HashSet',
                        'Elixir.Collectable.IO.Stream',
                        'Elixir.Collectable.List','Elixir.Collectable.Map',
                        'Elixir.Collectable.MapSet','Elixir.Collectable',
                        'Elixir.CompileError','Elixir.CondClauseError',
                        'Elixir.Config.Provider','Elixir.Config.Reader',
                        'Elixir.Config','Elixir.Date.Range','Elixir.Date',
                        'Elixir.DateTime','Elixir.Dict',
                        'Elixir.DynamicSupervisor','Elixir.Enum.EmptyError',
                        'Elixir.Enum.OutOfBoundsError','Elixir.Enum',
                        'Elixir.Enumerable.Date.Range',
                        'Elixir.Enumerable.File.Stream',
                        'Elixir.Enumerable.Function',
                        'Elixir.Enumerable.GenEvent.Stream',
                        'Elixir.Enumerable.HashDict',
                        'Elixir.Enumerable.HashSet',
                        'Elixir.Enumerable.IO.Stream',
                        'Elixir.Enumerable.List','Elixir.Enumerable.Map',
                        'Elixir.Enumerable.MapSet','Elixir.Enumerable.Range',
                        'Elixir.Enumerable.Stream','Elixir.Enumerable',
                        'Elixir.ErlangError','Elixir.Exception',
                        'Elixir.File.CopyError','Elixir.File.Error',
                        'Elixir.File.LinkError','Elixir.File.RenameError',
                        'Elixir.File.Stat','Elixir.File.Stream','Elixir.File',
                        'Elixir.Float','Elixir.Function',
                        'Elixir.FunctionClauseError','Elixir.GenEvent.Stream',
                        'Elixir.GenEvent','Elixir.GenServer',
                        'Elixir.HashDict','Elixir.HashSet',
                        'Elixir.IO.ANSI.Docs','Elixir.IO.ANSI.Sequence',
                        'Elixir.IO.ANSI','Elixir.IO.Stream',
                        'Elixir.IO.StreamError','Elixir.IO',
                        'Elixir.Inspect.Algebra','Elixir.Inspect.Any',
                        'Elixir.Inspect.Atom','Elixir.Inspect.BitString',
                        'Elixir.Inspect.Date.Range','Elixir.Inspect.Date',
                        'Elixir.Inspect.DateTime','Elixir.Inspect.Error',
                        'Elixir.Inspect.Float','Elixir.Inspect.Function',
                        'Elixir.Inspect.HashDict','Elixir.Inspect.HashSet',
                        'Elixir.Inspect.Integer','Elixir.Inspect.List',
                        'Elixir.Inspect.Map','Elixir.Inspect.MapSet',
                        'Elixir.Inspect.NaiveDateTime','Elixir.Inspect.Opts',
                        'Elixir.Inspect.PID','Elixir.Inspect.Port',
                        'Elixir.Inspect.Range','Elixir.Inspect.Reference',
                        'Elixir.Inspect.Regex','Elixir.Inspect.Stream',
                        'Elixir.Inspect.Time','Elixir.Inspect.Tuple',
                        'Elixir.Inspect.Version.Requirement',
                        'Elixir.Inspect.Version','Elixir.Inspect',
                        'Elixir.Integer','Elixir.Kernel.CLI',
                        'Elixir.Kernel.ErrorHandler',
                        'Elixir.Kernel.LexicalTracker',
                        'Elixir.Kernel.ParallelCompiler',
                        'Elixir.Kernel.ParallelRequire',
                        'Elixir.Kernel.SpecialForms','Elixir.Kernel.Typespec',
                        'Elixir.Kernel.Utils','Elixir.Kernel',
                        'Elixir.KeyError','Elixir.Keyword',
                        'Elixir.List.Chars.Atom',
                        'Elixir.List.Chars.BitString',
                        'Elixir.List.Chars.Float','Elixir.List.Chars.Integer',
                        'Elixir.List.Chars.List','Elixir.List.Chars',
                        'Elixir.List','Elixir.Macro.Env','Elixir.Macro',
                        'Elixir.Map','Elixir.MapSet','Elixir.MatchError',
                        'Elixir.Module.LocalsTracker','Elixir.Module',
                        'Elixir.NaiveDateTime','Elixir.Node',
                        'Elixir.OptionParser.ParseError',
                        'Elixir.OptionParser','Elixir.Path.Wildcard',
                        'Elixir.Path','Elixir.Port','Elixir.Process',
                        'Elixir.Protocol.UndefinedError','Elixir.Protocol',
                        'Elixir.Range','Elixir.Record.Extractor',
                        'Elixir.Record','Elixir.Regex.CompileError',
                        'Elixir.Regex','Elixir.Registry.Partition',
                        'Elixir.Registry.Supervisor','Elixir.Registry',
                        'Elixir.RuntimeError','Elixir.Set',
                        'Elixir.Stream.Reducers','Elixir.Stream',
                        'Elixir.String.Break','Elixir.String.Casing',
                        'Elixir.String.Chars.Atom',
                        'Elixir.String.Chars.BitString',
                        'Elixir.String.Chars.Date',
                        'Elixir.String.Chars.DateTime',
                        'Elixir.String.Chars.Float',
                        'Elixir.String.Chars.Integer',
                        'Elixir.String.Chars.List',
                        'Elixir.String.Chars.NaiveDateTime',
                        'Elixir.String.Chars.Time','Elixir.String.Chars.URI',
                        'Elixir.String.Chars.Version.Requirement',
                        'Elixir.String.Chars.Version','Elixir.String.Chars',
                        'Elixir.String.Tokenizer','Elixir.String.Unicode',
                        'Elixir.String','Elixir.StringIO',
                        'Elixir.Supervisor.Default','Elixir.Supervisor.Spec',
                        'Elixir.Supervisor','Elixir.SyntaxError',
                        'Elixir.System','Elixir.SystemLimitError',
                        'Elixir.Task.Supervised','Elixir.Task.Supervisor',
                        'Elixir.Task','Elixir.Time',
                        'Elixir.TokenMissingError','Elixir.TryClauseError',
                        'Elixir.Tuple','Elixir.URI',
                        'Elixir.UndefinedFunctionError',
                        'Elixir.UnicodeConversionError',
                        'Elixir.Version.InvalidRequirementError',
                        'Elixir.Version.InvalidVersionError',
                        'Elixir.Version.Parser','Elixir.Version.Requirement',
                        'Elixir.Version','Elixir.WithClauseError',elixir,
                        elixir_aliases,elixir_bitstring,elixir_bootstrap,
                        elixir_clauses,elixir_code_server,elixir_compiler,
                        elixir_config,elixir_def,elixir_dispatch,elixir_env,
                        elixir_erl,elixir_erl_clauses,elixir_erl_compiler,
                        elixir_erl_for,elixir_erl_pass,elixir_erl_try,
                        elixir_erl_var,elixir_errors,elixir_expand,elixir_fn,
                        elixir_import,elixir_interpolation,elixir_lexical,
                        elixir_locals,elixir_map,elixir_module,
                        elixir_overridable,elixir_parser,elixir_quote,
                        elixir_rewrite,elixir_sup,elixir_tokenizer,
                        elixir_utils]},
                   {registered,[elixir_sup,elixir_config,elixir_code_server]},
                   {applications,[kernel,stdlib,compiler]},
                   {included_applications,[]},
                   {env,
                       [{check_endianness,true},
                        {ansi_enabled,false},
                        {time_zone_database,
                            'Elixir.Calendar.UTCOnlyTimeZoneDatabase'}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{elixir,[]}}]}]}},
     {apply,
         {application,load,
             [{application,sasl,
                  [{description,"SASL  CXC 138 11"},
                   {vsn,"3.4.1"},
                   {id,[]},
                   {modules,
                       [sasl,alarm_handler,format_lib_supp,misc_supp,rb,
                        rb_format_supp,release_handler,release_handler_1,
                        erlsrv,sasl_report,sasl_report_tty_h,
                        sasl_report_file_h,systools,systools_make,systools_rc,
                        systools_relup,systools_lib]},
                   {registered,[sasl_sup,alarm_handler,release_handler]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{sasl,[]}}]}]}},
     {apply,
         {application,load,
             [{application,logger,
                  [{description,"logger"},
                   {vsn,"1.9.4"},
                   {id,[]},
                   {modules,
                       ['Elixir.Logger','Elixir.Logger.App',
                        'Elixir.Logger.BackendSupervisor',
                        'Elixir.Logger.Backends.Console',
                        'Elixir.Logger.Config','Elixir.Logger.ErlangHandler',
                        'Elixir.Logger.ErrorHandler',
                        'Elixir.Logger.Formatter','Elixir.Logger.Translator',
                        'Elixir.Logger.Utils','Elixir.Logger.Watcher']},
                   {registered,
                       ['Elixir.Logger','Elixir.Logger.BackendSupervisor',
                        'Elixir.Logger.Supervisor','Elixir.Logger.Watcher']},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,
                       [{level,debug},
                        {utc_log,false},
                        {truncate,8096},
                        {backends,[console]},
                        {translators,[{'Elixir.Logger.Translator',translate}]},
                        {sync_threshold,20},
                        {discard_threshold,500},
                        {handle_otp_reports,true},
                        {handle_sasl_reports,false},
                        {discard_threshold_periodic_check,30000},
                        {discard_threshold_for_error_logger,500},
                        {compile_time_purge_level,debug},
                        {compile_time_purge_matching,[]},
                        {compile_time_application,nil},
                        {translator_inspect_opts,[]},
                        {console,[]}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Logger.App',[]}}]}]}},
     {apply,
         {application,load,
             [{application,absinthe,
                  [{description,"absinthe"},
                   {vsn,"1.4.13"},
                   {id,[]},
                   {modules,
                       ['Elixir.Absinthe','Elixir.Absinthe.Adapter',
                        'Elixir.Absinthe.Adapter.LanguageConventions',
                        'Elixir.Absinthe.Adapter.Passthrough',
                        'Elixir.Absinthe.AnalysisError',
                        'Elixir.Absinthe.Blueprint',
                        'Elixir.Absinthe.Blueprint.Directive',
                        'Elixir.Absinthe.Blueprint.Document',
                        'Elixir.Absinthe.Blueprint.Document.Field',
                        'Elixir.Absinthe.Blueprint.Document.Fragment',
                        'Elixir.Absinthe.Blueprint.Document.Fragment.Inline',
                        'Elixir.Absinthe.Blueprint.Document.Fragment.Named',
                        'Elixir.Absinthe.Blueprint.Document.Fragment.Named.Use',
                        'Elixir.Absinthe.Blueprint.Document.Fragment.Spread',
                        'Elixir.Absinthe.Blueprint.Document.Operation',
                        'Elixir.Absinthe.Blueprint.Document.SourceLocation',
                        'Elixir.Absinthe.Blueprint.Document.VariableDefinition',
                        'Elixir.Absinthe.Blueprint.Draft',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Argument',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.BooleanValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Directive',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.DirectiveDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Document',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.EnumValueDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Field',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FieldDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FloatValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Fragment',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.FragmentSpread',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InlineFragment',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InputObjectTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InputValueDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.IntValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.InterfaceTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ListType',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ListValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NamedType',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NonNullType',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.NullValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectField',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ObjectValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.OperationDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.ScalarTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.SchemaDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.StringValue',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.UnionTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.Variable',
                        'Elixir.Absinthe.Blueprint.Draft.Absinthe.Language.VariableDefinition',
                        'Elixir.Absinthe.Blueprint.Draft.Atom',
                        'Elixir.Absinthe.Blueprint.Draft.List',
                        'Elixir.Absinthe.Blueprint.Execution',
                        'Elixir.Absinthe.Blueprint.Input',
                        'Elixir.Absinthe.Blueprint.Input.Argument',
                        'Elixir.Absinthe.Blueprint.Input.Boolean',
                        'Elixir.Absinthe.Blueprint.Input.Enum',
                        'Elixir.Absinthe.Blueprint.Input.Field',
                        'Elixir.Absinthe.Blueprint.Input.Float',
                        'Elixir.Absinthe.Blueprint.Input.Generated',
                        'Elixir.Absinthe.Blueprint.Input.Integer',
                        'Elixir.Absinthe.Blueprint.Input.List',
                        'Elixir.Absinthe.Blueprint.Input.Null',
                        'Elixir.Absinthe.Blueprint.Input.Object',
                        'Elixir.Absinthe.Blueprint.Input.RawValue',
                        'Elixir.Absinthe.Blueprint.Input.String',
                        'Elixir.Absinthe.Blueprint.Input.Value',
                        'Elixir.Absinthe.Blueprint.Input.Variable',
                        'Elixir.Absinthe.Blueprint.Input.Variable.Use',
                        'Elixir.Absinthe.Blueprint.Result.Leaf',
                        'Elixir.Absinthe.Blueprint.Result.List',
                        'Elixir.Absinthe.Blueprint.Result.Object',
                        'Elixir.Absinthe.Blueprint.Schema',
                        'Elixir.Absinthe.Blueprint.Schema.Deprecation',
                        'Elixir.Absinthe.Blueprint.Schema.DirectiveDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.EnumTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.EnumValueDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.FieldDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.InputObjectTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.InputValueDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.InterfaceTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.ObjectTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.ScalarTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.SchemaDefinition',
                        'Elixir.Absinthe.Blueprint.Schema.UnionTypeDefinition',
                        'Elixir.Absinthe.Blueprint.Transform',
                        'Elixir.Absinthe.Blueprint.Transform.Builder',
                        'Elixir.Absinthe.Blueprint.TypeReference',
                        'Elixir.Absinthe.Blueprint.TypeReference.List',
                        'Elixir.Absinthe.Blueprint.TypeReference.Name',
                        'Elixir.Absinthe.Blueprint.TypeReference.NonNull',
                        'Elixir.Absinthe.Complexity',
                        'Elixir.Absinthe.ExecutionError',
                        'Elixir.Absinthe.Introspection',
                        'Elixir.Absinthe.Introspection.Field',
                        'Elixir.Absinthe.Introspection.Kind',
                        'Elixir.Absinthe.Language',
                        'Elixir.Absinthe.Language.Argument',
                        'Elixir.Absinthe.Language.BooleanValue',
                        'Elixir.Absinthe.Language.Directive',
                        'Elixir.Absinthe.Language.DirectiveDefinition',
                        'Elixir.Absinthe.Language.Document',
                        'Elixir.Absinthe.Language.EnumTypeDefinition',
                        'Elixir.Absinthe.Language.EnumValue',
                        'Elixir.Absinthe.Language.EnumValueDefinition',
                        'Elixir.Absinthe.Language.Field',
                        'Elixir.Absinthe.Language.FieldDefinition',
                        'Elixir.Absinthe.Language.FloatValue',
                        'Elixir.Absinthe.Language.Fragment',
                        'Elixir.Absinthe.Language.FragmentSpread',
                        'Elixir.Absinthe.Language.InlineFragment',
                        'Elixir.Absinthe.Language.InputObjectTypeDefinition',
                        'Elixir.Absinthe.Language.InputValueDefinition',
                        'Elixir.Absinthe.Language.IntValue',
                        'Elixir.Absinthe.Language.InterfaceTypeDefinition',
                        'Elixir.Absinthe.Language.ListType',
                        'Elixir.Absinthe.Language.ListValue',
                        'Elixir.Absinthe.Language.NamedType',
                        'Elixir.Absinthe.Language.NonNullType',
                        'Elixir.Absinthe.Language.NullValue',
                        'Elixir.Absinthe.Language.ObjectField',
                        'Elixir.Absinthe.Language.ObjectTypeDefinition',
                        'Elixir.Absinthe.Language.ObjectValue',
                        'Elixir.Absinthe.Language.OperationDefinition',
                        'Elixir.Absinthe.Language.ScalarTypeDefinition',
                        'Elixir.Absinthe.Language.SchemaDefinition',
                        'Elixir.Absinthe.Language.SelectionSet',
                        'Elixir.Absinthe.Language.Source',
                        'Elixir.Absinthe.Language.StringValue',
                        'Elixir.Absinthe.Language.TypeExtensionDefinition',
                        'Elixir.Absinthe.Language.UnionTypeDefinition',
                        'Elixir.Absinthe.Language.Variable',
                        'Elixir.Absinthe.Language.VariableDefinition',
                        'Elixir.Absinthe.Logger','Elixir.Absinthe.Middleware',
                        'Elixir.Absinthe.Middleware.Async',
                        'Elixir.Absinthe.Middleware.Batch',
                        'Elixir.Absinthe.Middleware.Dataloader',
                        'Elixir.Absinthe.Middleware.MapGet',
                        'Elixir.Absinthe.Middleware.PassParent',
                        'Elixir.Absinthe.Phase',
                        'Elixir.Absinthe.Phase.Blueprint',
                        'Elixir.Absinthe.Phase.Debug',
                        'Elixir.Absinthe.Phase.Document.Arguments.CoerceEnums',
                        'Elixir.Absinthe.Phase.Document.Arguments.CoerceLists',
                        'Elixir.Absinthe.Phase.Document.Arguments.Data',
                        'Elixir.Absinthe.Phase.Document.Arguments.FlagInvalid',
                        'Elixir.Absinthe.Phase.Document.Arguments.Normalize',
                        'Elixir.Absinthe.Phase.Document.Arguments.Parse',
                        'Elixir.Absinthe.Phase.Document.Complexity.Analysis',
                        'Elixir.Absinthe.Phase.Document.Complexity.Result',
                        'Elixir.Absinthe.Phase.Document.Context',
                        'Elixir.Absinthe.Phase.Document.CurrentOperation',
                        'Elixir.Absinthe.Phase.Document.Directives',
                        'Elixir.Absinthe.Phase.Document.Execution.Resolution',
                        'Elixir.Absinthe.Phase.Document.MissingLiterals',
                        'Elixir.Absinthe.Phase.Document.MissingVariables',
                        'Elixir.Absinthe.Phase.Document.Result',
                        'Elixir.Absinthe.Phase.Document.Uses',
                        'Elixir.Absinthe.Phase.Document.Validation.ArgumentsOfCorrectType',
                        'Elixir.Absinthe.Phase.Document.Validation.FieldsOnCorrectType',
                        'Elixir.Absinthe.Phase.Document.Validation.KnownArgumentNames',
                        'Elixir.Absinthe.Phase.Document.Validation.KnownFragmentNames',
                        'Elixir.Absinthe.Phase.Document.Validation.LoneAnonymousOperation',
                        'Elixir.Absinthe.Phase.Document.Validation.NoFragmentCycles',
                        'Elixir.Absinthe.Phase.Document.Validation.NoUndefinedVariables',
                        'Elixir.Absinthe.Phase.Document.Validation.NoUnusedFragments',
                        'Elixir.Absinthe.Phase.Document.Validation.NoUnusedVariables',
                        'Elixir.Absinthe.Phase.Document.Validation.OnlyOneSubscription',
                        'Elixir.Absinthe.Phase.Document.Validation.ProvidedAnOperation',
                        'Elixir.Absinthe.Phase.Document.Validation.ProvidedNonNullArguments',
                        'Elixir.Absinthe.Phase.Document.Validation.ProvidedNonNullVariables',
                        'Elixir.Absinthe.Phase.Document.Validation.Result',
                        'Elixir.Absinthe.Phase.Document.Validation.ScalarLeafs',
                        'Elixir.Absinthe.Phase.Document.Validation.SelectedCurrentOperation',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueArgumentNames',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueFragmentNames',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueInputFieldNames',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueOperationNames',
                        'Elixir.Absinthe.Phase.Document.Validation.UniqueVariableNames',
                        'Elixir.Absinthe.Phase.Document.Validation.VariablesAreInputTypes',
                        'Elixir.Absinthe.Phase.Document.Variables',
                        'Elixir.Absinthe.Phase.Error',
                        'Elixir.Absinthe.Phase.Parse',
                        'Elixir.Absinthe.Phase.Schema',
                        'Elixir.Absinthe.Phase.Schema.Validation',
                        'Elixir.Absinthe.Phase.Subscription.Result',
                        'Elixir.Absinthe.Phase.Subscription.SubscribeSelf',
                        'Elixir.Absinthe.Phase.Validation',
                        'Elixir.Absinthe.Phase.Validation.Helpers',
                        'Elixir.Absinthe.Phase.Validation.KnownDirectives',
                        'Elixir.Absinthe.Phase.Validation.KnownTypeNames',
                        'Elixir.Absinthe.Pipeline',
                        'Elixir.Absinthe.Pipeline.BatchResolver',
                        'Elixir.Absinthe.Pipeline.ErrorResult',
                        'Elixir.Absinthe.Plugin','Elixir.Absinthe.Resolution',
                        'Elixir.Absinthe.Resolution.Helpers',
                        'Elixir.Absinthe.Resolution.Projector',
                        'Elixir.Absinthe.Schema',
                        'Elixir.Absinthe.Schema.Error',
                        'Elixir.Absinthe.Schema.Notation',
                        'Elixir.Absinthe.Schema.Notation.Definition',
                        'Elixir.Absinthe.Schema.Notation.Error',
                        'Elixir.Absinthe.Schema.Notation.Scope',
                        'Elixir.Absinthe.Schema.Notation.Writer',
                        'Elixir.Absinthe.Schema.Rule',
                        'Elixir.Absinthe.Schema.Rule.DefaultEnumValuePresent',
                        'Elixir.Absinthe.Schema.Rule.FieldImportsExist',
                        'Elixir.Absinthe.Schema.Rule.InputOuputTypesCorrectlyPlaced',
                        'Elixir.Absinthe.Schema.Rule.InterfacesMustResolveTypes',
                        'Elixir.Absinthe.Schema.Rule.NoCircularFieldImports',
                        'Elixir.Absinthe.Schema.Rule.ObjectInterfacesMustBeValid',
                        'Elixir.Absinthe.Schema.Rule.ObjectMustImplementInterfaces',
                        'Elixir.Absinthe.Schema.Rule.QueryTypeMustBeObject',
                        'Elixir.Absinthe.Schema.Rule.TypeNamesAreReserved',
                        'Elixir.Absinthe.Schema.Rule.TypeNamesAreUnique',
                        'Elixir.Absinthe.Schema.Rule.TypeNamesAreValid',
                        'Elixir.Absinthe.Schema.Verification',
                        'Elixir.Absinthe.Schema.Verification.Unions',
                        'Elixir.Absinthe.Subscription',
                        'Elixir.Absinthe.Subscription.Local',
                        'Elixir.Absinthe.Subscription.Proxy',
                        'Elixir.Absinthe.Subscription.ProxySupervisor',
                        'Elixir.Absinthe.Subscription.Pubsub',
                        'Elixir.Absinthe.Subscription.Registry',
                        'Elixir.Absinthe.Subscription.Registry.Partition',
                        'Elixir.Absinthe.Subscription.Registry.Supervisor',
                        'Elixir.Absinthe.Subscription.Supervisor',
                        'Elixir.Absinthe.Test','Elixir.Absinthe.Traversal',
                        'Elixir.Absinthe.Traversal.Node',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Language.Argument',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Language.Document',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Language.Field',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Language.Fragment',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Language.FragmentSpread',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Language.InlineFragment',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Language.OperationDefinition',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Language.SelectionSet',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Type.Argument',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Type.Field',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Type.InputObject',
                        'Elixir.Absinthe.Traversal.Node.Absinthe.Type.Object',
                        'Elixir.Absinthe.Traversal.Node.Any',
                        'Elixir.Absinthe.Traversal.Node.Atom',
                        'Elixir.Absinthe.Type',
                        'Elixir.Absinthe.Type.Argument',
                        'Elixir.Absinthe.Type.BuiltIns',
                        'Elixir.Absinthe.Type.BuiltIns.Directives',
                        'Elixir.Absinthe.Type.BuiltIns.Introspection',
                        'Elixir.Absinthe.Type.BuiltIns.Scalars',
                        'Elixir.Absinthe.Type.BuiltIns.Scalars.Utils',
                        'Elixir.Absinthe.Type.Custom',
                        'Elixir.Absinthe.Type.Custom.Decimal',
                        'Elixir.Absinthe.Type.Deprecation',
                        'Elixir.Absinthe.Type.Directive',
                        'Elixir.Absinthe.Type.Enum',
                        'Elixir.Absinthe.Type.Enum.Value',
                        'Elixir.Absinthe.Type.Fetch',
                        'Elixir.Absinthe.Type.Field',
                        'Elixir.Absinthe.Type.InputObject',
                        'Elixir.Absinthe.Type.Interface',
                        'Elixir.Absinthe.Type.List',
                        'Elixir.Absinthe.Type.NonNull',
                        'Elixir.Absinthe.Type.Object',
                        'Elixir.Absinthe.Type.Reference',
                        'Elixir.Absinthe.Type.Scalar',
                        'Elixir.Absinthe.Type.Union','Elixir.Absinthe.Utils',
                        'Elixir.Absinthe.Utils.Suggestion',
                        'Elixir.Inspect.Absinthe.Resolution',
                        'Elixir.Mix.Tasks.Absinthe.Schema.Json',
                        absinthe_lexer,absinthe_parser]},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,eex,
                  [{description,"eex"},
                   {vsn,"1.9.4"},
                   {id,[]},
                   {modules,
                       ['Elixir.EEx','Elixir.EEx.Compiler',
                        'Elixir.EEx.Engine','Elixir.EEx.SmartEngine',
                        'Elixir.EEx.SyntaxError','Elixir.EEx.Tokenizer']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,mime,
                  [{description,"A MIME type module for Elixir"},
                   {vsn,"1.6.0"},
                   {id,[]},
                   {modules,['Elixir.MIME','Elixir.MIME.Application']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[{types,#{}}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.MIME.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,crypto,
                  [{description,"CRYPTO"},
                   {vsn,"4.6.4"},
                   {id,[]},
                   {modules,[crypto,crypto_ec_curves]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[{fips_mode,false},{rand_cache_size,896}]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,plug_crypto,
                  [{description,"Crypto-related functionality for the web"},
                   {vsn,"1.2.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.Plug.Crypto','Elixir.Plug.Crypto.Application',
                        'Elixir.Plug.Crypto.KeyGenerator',
                        'Elixir.Plug.Crypto.MessageEncryptor',
                        'Elixir.Plug.Crypto.MessageVerifier']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,crypto]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Plug.Crypto.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,telemetry,
                  [{description,
                       "Dynamic dispatching library for metrics and instrumentations"},
                   {vsn,"0.4.3"},
                   {id,[]},
                   {modules,
                       [telemetry,telemetry_app,telemetry_handler_table,
                        telemetry_sup]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{telemetry_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,plug,
                  [{description,
                       "A specification and conveniences for composable modules between web applications"},
                   {vsn,"1.11.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Collectable.Plug.Conn',
                        'Elixir.Inspect.Plug.Conn','Elixir.Plug',
                        'Elixir.Plug.Adapters.Cowboy',
                        'Elixir.Plug.Adapters.Cowboy2',
                        'Elixir.Plug.Adapters.Test.Conn',
                        'Elixir.Plug.Application',
                        'Elixir.Plug.BadRequestError','Elixir.Plug.BasicAuth',
                        'Elixir.Plug.Builder','Elixir.Plug.CSRFProtection',
                        'Elixir.Plug.CSRFProtection.InvalidCSRFTokenError',
                        'Elixir.Plug.CSRFProtection.InvalidCrossOriginRequestError',
                        'Elixir.Plug.Conn','Elixir.Plug.Conn.Adapter',
                        'Elixir.Plug.Conn.AlreadySentError',
                        'Elixir.Plug.Conn.CookieOverflowError',
                        'Elixir.Plug.Conn.Cookies',
                        'Elixir.Plug.Conn.InvalidHeaderError',
                        'Elixir.Plug.Conn.InvalidQueryError',
                        'Elixir.Plug.Conn.NotSentError',
                        'Elixir.Plug.Conn.Query','Elixir.Plug.Conn.Status',
                        'Elixir.Plug.Conn.Unfetched','Elixir.Plug.Conn.Utils',
                        'Elixir.Plug.Conn.WrapperError',
                        'Elixir.Plug.Debugger','Elixir.Plug.ErrorHandler',
                        'Elixir.Plug.Exception','Elixir.Plug.Exception.Any',
                        'Elixir.Plug.HTML','Elixir.Plug.Head',
                        'Elixir.Plug.Logger','Elixir.Plug.MIME',
                        'Elixir.Plug.MethodOverride','Elixir.Plug.Parsers',
                        'Elixir.Plug.Parsers.BadEncodingError',
                        'Elixir.Plug.Parsers.JSON',
                        'Elixir.Plug.Parsers.MULTIPART',
                        'Elixir.Plug.Parsers.ParseError',
                        'Elixir.Plug.Parsers.RequestTooLargeError',
                        'Elixir.Plug.Parsers.URLENCODED',
                        'Elixir.Plug.Parsers.UnsupportedMediaTypeError',
                        'Elixir.Plug.RequestId','Elixir.Plug.RewriteOn',
                        'Elixir.Plug.Router',
                        'Elixir.Plug.Router.InvalidSpecError',
                        'Elixir.Plug.Router.MalformedURIError',
                        'Elixir.Plug.Router.Utils','Elixir.Plug.SSL',
                        'Elixir.Plug.Session','Elixir.Plug.Session.COOKIE',
                        'Elixir.Plug.Session.ETS','Elixir.Plug.Session.Store',
                        'Elixir.Plug.Static',
                        'Elixir.Plug.Static.InvalidPathError',
                        'Elixir.Plug.Telemetry','Elixir.Plug.Test',
                        'Elixir.Plug.TimeoutError','Elixir.Plug.Upload',
                        'Elixir.Plug.UploadError',plug_multipart]},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,eex,logger,mime,plug_crypto,
                        telemetry]},
                   {included_applications,[]},
                   {env,[{validate_header_keys_during_test,true}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Plug.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,absinthe_plug,
                  [{description,"absinthe_plug"},
                   {vsn,"1.4.6"},
                   {id,[]},
                   {modules,
                       ['Elixir.Absinthe.GraphiQL.Validation.NoSubscriptionOnHTTP',
                        'Elixir.Absinthe.Plug',
                        'Elixir.Absinthe.Plug.Batch.Runner',
                        'Elixir.Absinthe.Plug.DocumentProvider',
                        'Elixir.Absinthe.Plug.DocumentProvider.Compiled',
                        'Elixir.Absinthe.Plug.DocumentProvider.Compiled.Check',
                        'Elixir.Absinthe.Plug.DocumentProvider.Compiled.Writer',
                        'Elixir.Absinthe.Plug.DocumentProvider.Default',
                        'Elixir.Absinthe.Plug.GraphiQL',
                        'Elixir.Absinthe.Plug.GraphiQL.Assets',
                        'Elixir.Absinthe.Plug.Parser',
                        'Elixir.Absinthe.Plug.Request',
                        'Elixir.Absinthe.Plug.Request.Query',
                        'Elixir.Absinthe.Plug.Types',
                        'Elixir.Absinthe.Plug.Validation.HTTPMethod',
                        'Elixir.Mix.Absinthe.Plug.GraphiQL.AssetsTask',
                        'Elixir.Mix.Tasks.Absinthe.Plug.Graphiql.Assets.Download',
                        'Elixir.Mix.Tasks.Absinthe.Plug.Graphiql.Assets.Remove']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,absinthe,logger,plug]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,cors_plug,
                  [{description,
                       "An elixir plug that adds CORS headers to requests and responds to\npreflight requests (OPTIONS)\n"},
                   {vsn,"2.0.0"},
                   {id,[]},
                   {modules,['Elixir.CORSPlug']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,dataloader,
                  [{description,"dataloader"},
                   {vsn,"1.0.8"},
                   {id,[]},
                   {modules,
                       ['Elixir.Dataloader','Elixir.Dataloader.GetError',
                        'Elixir.Dataloader.KV','Elixir.Dataloader.Source',
                        'Elixir.Dataloader.Source.Dataloader.KV']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,gettext,
                  [{description,
                       "Internationalization and localization through gettext"},
                   {vsn,"0.16.1"},
                   {id,[]},
                   {modules,
                       ['Elixir.Gettext','Elixir.Gettext.Application',
                        'Elixir.Gettext.Backend','Elixir.Gettext.Compiler',
                        'Elixir.Gettext.Error','Elixir.Gettext.Extractor',
                        'Elixir.Gettext.ExtractorAgent',
                        'Elixir.Gettext.Fuzzy','Elixir.Gettext.Interpolation',
                        'Elixir.Gettext.Merger',
                        'Elixir.Gettext.MissingBindingsError',
                        'Elixir.Gettext.PO','Elixir.Gettext.PO.Parser',
                        'Elixir.Gettext.PO.PluralTranslation',
                        'Elixir.Gettext.PO.SyntaxError',
                        'Elixir.Gettext.PO.Tokenizer',
                        'Elixir.Gettext.PO.Translation',
                        'Elixir.Gettext.PO.Translations',
                        'Elixir.Gettext.Plural',
                        'Elixir.Gettext.Plural.UnknownLocaleError',
                        'Elixir.Mix.Tasks.Compile.Gettext',
                        'Elixir.Mix.Tasks.Gettext.Extract',
                        'Elixir.Mix.Tasks.Gettext.Merge',gettext_po_parser]},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger]},
                   {included_applications,[]},
                   {env,[{default_locale,<<"en">>}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Gettext.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,asn1,
                  [{description,"The Erlang ASN1 compiler version 5.0.9"},
                   {vsn,"5.0.9"},
                   {id,[]},
                   {modules,[asn1rt_nif]},
                   {registered,[asn1_ns,asn1db]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,certifi,
                  [{description,
                       "CA bundle adapted from Mozilla by https://certifi.io"},
                   {vsn,"2.6.1"},
                   {id,[]},
                   {modules,[certifi,certifi_pt]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,unicode_util_compat,
                  [{description,
                       "unicode_util compatibility library for Erlang < 20"},
                   {vsn,"0.7.0"},
                   {id,[]},
                   {modules,[string_compat,unicode_util_compat]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,idna,
                  [{description,"A pure Erlang IDNA implementation"},
                   {vsn,"6.1.1"},
                   {id,[]},
                   {modules,
                       [idna,idna_bidi,idna_context,idna_data,idna_mapping,
                        idna_table,idna_ucs,punycode]},
                   {registered,[]},
                   {applications,[kernel,stdlib,unicode_util_compat]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,metrics,
                  [{description,
                       "A generic interface to different metrics systems in Erlang."},
                   {vsn,"1.0.1"},
                   {id,[]},
                   {modules,
                       [metrics,metrics_dummy,metrics_exometer,
                        metrics_folsom]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,mimerl,
                  [{description,"Library to handle mimetypes"},
                   {vsn,"1.2.0"},
                   {id,[]},
                   {modules,[mimerl]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,syntax_tools,
                  [{description,"Syntax tools"},
                   {vsn,"2.2.1"},
                   {id,[]},
                   {modules,
                       [epp_dodger,erl_comment_scan,erl_prettypr,
                        erl_recomment,erl_syntax,erl_syntax_lib,erl_tidy,igor,
                        merl,merl_transform,prettypr]},
                   {registered,[]},
                   {applications,[stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,parse_trans,
                  [{description,"Parse transform library"},
                   {vsn,"3.3.1"},
                   {id,[]},
                   {modules,
                       [ct_expand,exprecs,parse_trans,parse_trans_codegen,
                        parse_trans_mod,parse_trans_pp]},
                   {registered,[]},
                   {applications,[kernel,stdlib,syntax_tools]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,public_key,
                  [{description,"Public key infrastructure"},
                   {vsn,"1.7.1"},
                   {id,[]},
                   {modules,
                       [public_key,pubkey_pem,pubkey_pbe,pubkey_ssh,
                        pubkey_cert,pubkey_cert_records,pubkey_crl,
                        'OTP-PUB-KEY','PKCS-FRAME']},
                   {registered,[]},
                   {applications,[kernel,stdlib,asn1,crypto]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,ssl,
                  [{description,"Erlang/OTP SSL application"},
                   {vsn,"9.5.3"},
                   {id,[]},
                   {modules,
                       [tls_connection,tls_connection_1_3,tls_handshake,
                        tls_handshake_1_3,tls_record,tls_record_1_3,
                        tls_socket,tls_v1,ssl_v3,tls_connection_sup,
                        tls_sender,tls_server_sup,
                        tls_server_session_ticket_sup,
                        tls_server_session_ticket,tls_sup,ssl_dh_groups,
                        dtls_connection,dtls_handshake,dtls_record,
                        dtls_socket,dtls_v1,dtls_connection_sup,
                        dtls_packet_demux,dtls_listener_sup,dtls_sup,ssl,
                        ssl_session_cache_api,ssl_config,ssl_connection,
                        ssl_handshake,ssl_record,ssl_cipher,ssl_cipher_format,
                        ssl_srp_primes,ssl_alert,ssl_listen_tracker_sup,
                        tls_bloom_filter,tls_client_ticket_store,
                        inet_tls_dist,inet6_tls_dist,ssl_dist_sup,
                        ssl_dist_connection_sup,ssl_dist_admin_sup,
                        ssl_session,ssl_session_cache,ssl_manager,
                        ssl_pem_cache,ssl_pkix_db,ssl_certificate,ssl_crl,
                        ssl_crl_cache,ssl_crl_cache_api,ssl_crl_hash_dir,
                        ssl_logger,ssl_app,ssl_sup,ssl_admin_sup,
                        ssl_connection_sup]},
                   {registered,[ssl_sup,ssl_manager]},
                   {applications,[kernel,stdlib,crypto,public_key]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{ssl_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,ssl_verify_fun,
                  [{description,"SSL verification functions for Erlang\n"},
                   {vsn,"1.1.6"},
                   {id,[]},
                   {modules,
                       [ssl_verify_fingerprint,ssl_verify_fun_cert_helpers,
                        ssl_verify_fun_encodings,ssl_verify_hostname,
                        ssl_verify_pk,ssl_verify_string,ssl_verify_util]},
                   {registered,[]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,hackney,
                  [{description,"simple HTTP client"},
                   {vsn,"1.17.4"},
                   {id,[]},
                   {modules,
                       [hackney,hackney_app,hackney_bstr,hackney_connect,
                        hackney_connection,hackney_connections,hackney_cookie,
                        hackney_date,hackney_headers,hackney_headers_new,
                        hackney_http,hackney_http_connect,hackney_local_tcp,
                        hackney_manager,hackney_metrics,hackney_multipart,
                        hackney_pool,hackney_pool_handler,hackney_request,
                        hackney_response,hackney_socks5,hackney_ssl,
                        hackney_ssl_certificate,hackney_stream,hackney_sup,
                        hackney_tcp,hackney_trace,hackney_url,hackney_util]},
                   {registered,[hackney_pool]},
                   {applications,
                       [kernel,stdlib,asn1,certifi,crypto,idna,metrics,mimerl,
                        parse_trans,public_key,ssl,ssl_verify_fun,
                        unicode_util_compat]},
                   {included_applications,[]},
                   {env,
                       [{timeout,150000},
                        {max_connections,50},
                        {restart,permanent},
                        {shutdown,10000},
                        {maxr,10},
                        {maxt,1}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{hackney_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,httpoison,
                  [{description,
                       "Yet Another HTTP client for Elixir powered by hackney"},
                   {vsn,"1.8.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.HTTPoison','Elixir.HTTPoison.AsyncChunk',
                        'Elixir.HTTPoison.AsyncEnd',
                        'Elixir.HTTPoison.AsyncHeaders',
                        'Elixir.HTTPoison.AsyncRedirect',
                        'Elixir.HTTPoison.AsyncResponse',
                        'Elixir.HTTPoison.AsyncStatus',
                        'Elixir.HTTPoison.Base','Elixir.HTTPoison.Error',
                        'Elixir.HTTPoison.Handlers.Multipart',
                        'Elixir.HTTPoison.MaybeRedirect',
                        'Elixir.HTTPoison.Request',
                        'Elixir.HTTPoison.Response']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,hackney]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,jason,
                  [{description,
                       "A blazing fast JSON parser and generator in pure Elixir.\n"},
                   {vsn,"1.2.2"},
                   {id,[]},
                   {modules,
                       ['Elixir.Jason','Elixir.Jason.Codegen',
                        'Elixir.Jason.DecodeError','Elixir.Jason.Decoder',
                        'Elixir.Jason.Decoder.Unescape','Elixir.Jason.Encode',
                        'Elixir.Jason.EncodeError','Elixir.Jason.Encoder',
                        'Elixir.Jason.Encoder.Any',
                        'Elixir.Jason.Encoder.Atom',
                        'Elixir.Jason.Encoder.BitString',
                        'Elixir.Jason.Encoder.Date',
                        'Elixir.Jason.Encoder.DateTime',
                        'Elixir.Jason.Encoder.Decimal',
                        'Elixir.Jason.Encoder.Float',
                        'Elixir.Jason.Encoder.Integer',
                        'Elixir.Jason.Encoder.Jason.Fragment',
                        'Elixir.Jason.Encoder.List',
                        'Elixir.Jason.Encoder.Map',
                        'Elixir.Jason.Encoder.NaiveDateTime',
                        'Elixir.Jason.Encoder.Time','Elixir.Jason.Formatter',
                        'Elixir.Jason.Fragment','Elixir.Jason.Helpers']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,phoenix_pubsub,
                  [{description,"Distributed PubSub and Presence platform"},
                   {vsn,"2.0.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Phoenix.PubSub',
                        'Elixir.Phoenix.PubSub.Adapter',
                        'Elixir.Phoenix.PubSub.Application',
                        'Elixir.Phoenix.PubSub.BroadcastError',
                        'Elixir.Phoenix.PubSub.PG2',
                        'Elixir.Phoenix.PubSub.Supervisor',
                        'Elixir.Phoenix.Tracker',
                        'Elixir.Phoenix.Tracker.Clock',
                        'Elixir.Phoenix.Tracker.DeltaGeneration',
                        'Elixir.Phoenix.Tracker.Replica',
                        'Elixir.Phoenix.Tracker.Shard',
                        'Elixir.Phoenix.Tracker.State']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,crypto,logger]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix.PubSub.Application',[]}}]}]}},
     {apply,
         {application,load,
             [{application,phoenix,
                  [{description,
                       "Productive. Reliable. Fast. A productive web framework that\ndoes not compromise speed or maintainability.\n"},
                   {vsn,"1.5.9"},
                   {id,[]},
                   {modules,
                       ['Elixir.Mix.Phoenix','Elixir.Mix.Phoenix.Context',
                        'Elixir.Mix.Phoenix.Schema',
                        'Elixir.Mix.Tasks.Compile.Phoenix',
                        'Elixir.Mix.Tasks.Phx','Elixir.Mix.Tasks.Phx.Digest',
                        'Elixir.Mix.Tasks.Phx.Digest.Clean',
                        'Elixir.Mix.Tasks.Phx.Gen.Cert',
                        'Elixir.Mix.Tasks.Phx.Gen.Channel',
                        'Elixir.Mix.Tasks.Phx.Gen.Context',
                        'Elixir.Mix.Tasks.Phx.Gen.Embedded',
                        'Elixir.Mix.Tasks.Phx.Gen.Html',
                        'Elixir.Mix.Tasks.Phx.Gen.Json',
                        'Elixir.Mix.Tasks.Phx.Gen.Live',
                        'Elixir.Mix.Tasks.Phx.Gen.Presence',
                        'Elixir.Mix.Tasks.Phx.Gen.Schema',
                        'Elixir.Mix.Tasks.Phx.Gen.Secret',
                        'Elixir.Mix.Tasks.Phx.Routes',
                        'Elixir.Mix.Tasks.Phx.Server','Elixir.Phoenix',
                        'Elixir.Phoenix.ActionClauseError',
                        'Elixir.Phoenix.Channel',
                        'Elixir.Phoenix.Channel.Server',
                        'Elixir.Phoenix.ChannelTest',
                        'Elixir.Phoenix.ChannelTest.NoopSerializer',
                        'Elixir.Phoenix.CodeReloader',
                        'Elixir.Phoenix.CodeReloader.Proxy',
                        'Elixir.Phoenix.CodeReloader.Server',
                        'Elixir.Phoenix.Config','Elixir.Phoenix.ConnTest',
                        'Elixir.Phoenix.Controller',
                        'Elixir.Phoenix.Controller.Pipeline',
                        'Elixir.Phoenix.Digester','Elixir.Phoenix.Endpoint',
                        'Elixir.Phoenix.Endpoint.Cowboy2Adapter',
                        'Elixir.Phoenix.Endpoint.Cowboy2Handler',
                        'Elixir.Phoenix.Endpoint.CowboyAdapter',
                        'Elixir.Phoenix.Endpoint.CowboyWebSocket',
                        'Elixir.Phoenix.Endpoint.RenderErrors',
                        'Elixir.Phoenix.Endpoint.Supervisor',
                        'Elixir.Phoenix.Endpoint.Watcher',
                        'Elixir.Phoenix.Logger',
                        'Elixir.Phoenix.MissingParamError',
                        'Elixir.Phoenix.Naming',
                        'Elixir.Phoenix.NotAcceptableError',
                        'Elixir.Phoenix.Param','Elixir.Phoenix.Param.Any',
                        'Elixir.Phoenix.Param.Atom',
                        'Elixir.Phoenix.Param.BitString',
                        'Elixir.Phoenix.Param.Integer',
                        'Elixir.Phoenix.Param.Map','Elixir.Phoenix.Presence',
                        'Elixir.Phoenix.Presence.Tracker',
                        'Elixir.Phoenix.Router',
                        'Elixir.Phoenix.Router.ConsoleFormatter',
                        'Elixir.Phoenix.Router.Helpers',
                        'Elixir.Phoenix.Router.MalformedURIError',
                        'Elixir.Phoenix.Router.NoRouteError',
                        'Elixir.Phoenix.Router.Resource',
                        'Elixir.Phoenix.Router.Route',
                        'Elixir.Phoenix.Router.Scope','Elixir.Phoenix.Socket',
                        'Elixir.Phoenix.Socket.Broadcast',
                        'Elixir.Phoenix.Socket.InvalidMessageError',
                        'Elixir.Phoenix.Socket.Message',
                        'Elixir.Phoenix.Socket.PoolSupervisor',
                        'Elixir.Phoenix.Socket.Reply',
                        'Elixir.Phoenix.Socket.Serializer',
                        'Elixir.Phoenix.Socket.Transport',
                        'Elixir.Phoenix.Socket.V1.JSONSerializer',
                        'Elixir.Phoenix.Socket.V2.JSONSerializer',
                        'Elixir.Phoenix.Template',
                        'Elixir.Phoenix.Template.EExEngine',
                        'Elixir.Phoenix.Template.Engine',
                        'Elixir.Phoenix.Template.ExsEngine',
                        'Elixir.Phoenix.Template.UndefinedError',
                        'Elixir.Phoenix.Token',
                        'Elixir.Phoenix.Transports.LongPoll',
                        'Elixir.Phoenix.Transports.LongPoll.Server',
                        'Elixir.Phoenix.Transports.WebSocket',
                        'Elixir.Phoenix.View',
                        'Elixir.Plug.Exception.Phoenix.ActionClauseError']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,crypto,eex,logger,phoenix_pubsub,
                        plug,plug_crypto,public_key,telemetry]},
                   {included_applications,[]},
                   {env,
                       [{logger,true},
                        {stacktrace_depth,nil},
                        {template_engines,[]},
                        {format_encoders,[]},
                        {filter_parameters,[<<"password">>]},
                        {serve_endpoints,false},
                        {gzippable_exts,
                            [<<".js">>,<<".css">>,<<".txt">>,<<".text">>,
                             <<".html">>,<<".json">>,<<".svg">>,<<".eot">>,
                             <<".ttf">>]},
                        {trim_on_html_eex_engine,true}]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Phoenix',[]}}]}]}},
     {apply,
         {application,load,
             [{application,cowlib,
                  [{description,
                       "Support library for manipulating Web protocols."},
                   {vsn,"2.11.0"},
                   {id,[]},
                   {modules,
                       [cow_base64url,cow_cookie,cow_date,cow_hpack,cow_http,
                        cow_http2,cow_http2_machine,cow_http_hd,
                        cow_http_struct_hd,cow_http_te,cow_iolists,cow_link,
                        cow_mimetypes,cow_multipart,cow_qs,cow_spdy,cow_sse,
                        cow_uri,cow_uri_template,cow_ws]},
                   {registered,[]},
                   {applications,[kernel,stdlib,crypto]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,ranch,
                  [{description,"Socket acceptor pool for TCP protocols."},
                   {vsn,"1.8.0"},
                   {id,[]},
                   {modules,
                       [ranch,ranch_acceptor,ranch_acceptors_sup,ranch_app,
                        ranch_conns_sup,ranch_crc32c,ranch_listener_sup,
                        ranch_protocol,ranch_proxy_header,ranch_server,
                        ranch_ssl,ranch_sup,ranch_tcp,ranch_transport]},
                   {registered,[ranch_sup,ranch_server]},
                   {applications,[kernel,stdlib,ssl]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{ranch_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,cowboy,
                  [{description,"Small, fast, modern HTTP server."},
                   {vsn,"2.9.0"},
                   {id,[]},
                   {modules,
                       [cowboy,cowboy_app,cowboy_bstr,cowboy_children,
                        cowboy_clear,cowboy_clock,cowboy_compress_h,
                        cowboy_constraints,cowboy_handler,cowboy_http,
                        cowboy_http2,cowboy_loop,cowboy_metrics_h,
                        cowboy_middleware,cowboy_req,cowboy_rest,
                        cowboy_router,cowboy_static,cowboy_stream,
                        cowboy_stream_h,cowboy_sub_protocol,cowboy_sup,
                        cowboy_tls,cowboy_tracer_h,cowboy_websocket]},
                   {registered,[cowboy_sup,cowboy_clock]},
                   {applications,[kernel,stdlib,cowlib,crypto,ranch]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{cowboy_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,cowboy_telemetry,
                  [{description,"Telemetry instrumentation for Cowboy"},
                   {vsn,"0.3.1"},
                   {id,[]},
                   {modules,[cowboy_telemetry_h]},
                   {registered,[]},
                   {applications,[kernel,stdlib,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,plug_cowboy,
                  [{description,"A Plug adapter for Cowboy"},
                   {vsn,"2.5.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Plug.Cowboy','Elixir.Plug.Cowboy.Conn',
                        'Elixir.Plug.Cowboy.Drainer',
                        'Elixir.Plug.Cowboy.Handler',
                        'Elixir.Plug.Cowboy.Translator']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,cowboy,cowboy_telemetry,logger,
                        plug,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.Plug.Cowboy',[]}}]}]}},
     {apply,
         {application,load,
             [{application,poison,
                  [{description,
                       "An incredibly fast, pure Elixir JSON library"},
                   {vsn,"2.1.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Poison','Elixir.Poison.Decode',
                        'Elixir.Poison.Decoder','Elixir.Poison.Decoder.Any',
                        'Elixir.Poison.Encode','Elixir.Poison.EncodeError',
                        'Elixir.Poison.Encoder','Elixir.Poison.Encoder.Any',
                        'Elixir.Poison.Encoder.Atom',
                        'Elixir.Poison.Encoder.BitString',
                        'Elixir.Poison.Encoder.Float',
                        'Elixir.Poison.Encoder.HashDict',
                        'Elixir.Poison.Encoder.HashSet',
                        'Elixir.Poison.Encoder.Integer',
                        'Elixir.Poison.Encoder.List',
                        'Elixir.Poison.Encoder.Map',
                        'Elixir.Poison.Encoder.Range',
                        'Elixir.Poison.Encoder.Stream','Elixir.Poison.Parser',
                        'Elixir.Poison.Pretty','Elixir.Poison.SyntaxError']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,runtime_tools,
                  [{description,"RUNTIME_TOOLS"},
                   {vsn,"1.14"},
                   {id,[]},
                   {modules,
                       [appmon_info,dbg,observer_backend,runtime_tools,
                        runtime_tools_sup,erts_alloc_config,ttb_autostart,
                        dyntrace,system_information,scheduler,msacc]},
                   {registered,[runtime_tools_sup]},
                   {applications,[kernel,stdlib]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{runtime_tools,[]}}]}]}},
     {apply,
         {application,load,
             [{application,telemetry_metrics,
                  [{description,
                       "Provides a common interface for defining metrics based on Telemetry events.\n"},
                   {vsn,"0.6.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.Telemetry.Metrics',
                        'Elixir.Telemetry.Metrics.ConsoleReporter',
                        'Elixir.Telemetry.Metrics.Counter',
                        'Elixir.Telemetry.Metrics.Distribution',
                        'Elixir.Telemetry.Metrics.LastValue',
                        'Elixir.Telemetry.Metrics.Sum',
                        'Elixir.Telemetry.Metrics.Summary']},
                   {registered,[]},
                   {applications,[kernel,stdlib,elixir,logger,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity}]}]}},
     {apply,
         {application,load,
             [{application,telemetry_poller,
                  [{description,
                       "Periodically collect measurements and dispatch them as Telemetry events."},
                   {vsn,"0.5.1"},
                   {id,[]},
                   {modules,
                       [telemetry_poller,telemetry_poller_app,
                        telemetry_poller_builtin,telemetry_poller_sup]},
                   {registered,[]},
                   {applications,[kernel,stdlib,telemetry]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{telemetry_poller_app,[]}}]}]}},
     {apply,
         {application,load,
             [{application,teamcowboygraphql,
                  [{description,"teamcowboygraphql"},
                   {vsn,"0.1.0"},
                   {id,[]},
                   {modules,
                       ['Elixir.TeamCowboyGraphQL',
                        'Elixir.TeamCowboyGraphQL.Application',
                        'Elixir.TeamCowboyGraphQL.Client',
                        'Elixir.TeamCowboyGraphQL.Client.Auth',
                        'Elixir.TeamCowboyGraphQL.Client.Event',
                        'Elixir.TeamCowboyGraphQL.Client.Event.SaveRsvpParams',
                        'Elixir.TeamCowboyGraphQL.Client.Team',
                        'Elixir.TeamCowboyGraphQL.Client.User',
                        'Elixir.TeamCowboyGraphQL.Data.Api.RequestParameters',
                        'Elixir.TeamCowboyGraphQL.Data.Api.RequestSignature',
                        'Elixir.TeamCowboyGraphQL.Data.Api.TeamCowboyResponse',
                        'Elixir.TeamCowboyGraphQL.Data.Normalization.TeamCowboy.Events',
                        'Elixir.TeamCowboyGraphQL.Data.Normalization.TeamCowboy.Locations',
                        'Elixir.TeamCowboyGraphQL.Data.Normalization.TeamCowboy.Teams',
                        'Elixir.TeamCowboyGraphQL.Data.Normalization.TeamCowboy.Users',
                        'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.Event',
                        'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.Location',
                        'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.Team',
                        'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.User',
                        'Elixir.TeamCowboyGraphQL.Data.TeamCowboy.UserToken',
                        'Elixir.TeamCowboyGraphQL.Fetchers.Events',
                        'Elixir.TeamCowboyGraphQL.Repos.Events',
                        'Elixir.TeamCowboyGraphQL.Savers.Events',
                        'Elixir.TeamCowboyGraphQLWeb',
                        'Elixir.TeamCowboyGraphQLWeb.Context',
                        'Elixir.TeamCowboyGraphQLWeb.Endpoint',
                        'Elixir.TeamCowboyGraphQLWeb.ErrorHelpers',
                        'Elixir.TeamCowboyGraphQLWeb.ErrorView',
                        'Elixir.TeamCowboyGraphQLWeb.Gettext',
                        'Elixir.TeamCowboyGraphQLWeb.Loaders.Teams',
                        'Elixir.TeamCowboyGraphQLWeb.Resolvers.Events',
                        'Elixir.TeamCowboyGraphQLWeb.Resolvers.Teams',
                        'Elixir.TeamCowboyGraphQLWeb.Resolvers.Users',
                        'Elixir.TeamCowboyGraphQLWeb.Router',
                        'Elixir.TeamCowboyGraphQLWeb.Router.Helpers',
                        'Elixir.TeamCowboyGraphQLWeb.Schema',
                        'Elixir.TeamCowboyGraphQLWeb.Telemetry']},
                   {registered,[]},
                   {applications,
                       [kernel,stdlib,elixir,absinthe_plug,cors_plug,
                        dataloader,gettext,httpoison,jason,logger,phoenix,
                        plug_cowboy,poison,runtime_tools,telemetry_metrics,
                        telemetry_poller]},
                   {included_applications,[]},
                   {env,[]},
                   {maxT,infinity},
                   {maxP,infinity},
                   {mod,{'Elixir.TeamCowboyGraphQL.Application',[]}}]}]}},
     {progress,applications_loaded},
     {apply,{application,start_boot,[kernel,permanent]}},
     {apply,{application,start_boot,[stdlib,permanent]}},
     {apply,{'Elixir.Config.Provider',boot,[elixir,config_providers]}},
     {apply,{application,start_boot,[compiler,permanent]}},
     {apply,{application,start_boot,[elixir,permanent]}},
     {apply,{application,start_boot,[sasl,permanent]}},
     {apply,{application,start_boot,[logger,permanent]}},
     {apply,{application,start_boot,[absinthe,permanent]}},
     {apply,{application,start_boot,[eex,permanent]}},
     {apply,{application,start_boot,[mime,permanent]}},
     {apply,{application,start_boot,[crypto,permanent]}},
     {apply,{application,start_boot,[plug_crypto,permanent]}},
     {apply,{application,start_boot,[telemetry,permanent]}},
     {apply,{application,start_boot,[plug,permanent]}},
     {apply,{application,start_boot,[absinthe_plug,permanent]}},
     {apply,{application,start_boot,[cors_plug,permanent]}},
     {apply,{application,start_boot,[dataloader,permanent]}},
     {apply,{application,start_boot,[gettext,permanent]}},
     {apply,{application,start_boot,[asn1,permanent]}},
     {apply,{application,start_boot,[certifi,permanent]}},
     {apply,{application,start_boot,[unicode_util_compat,permanent]}},
     {apply,{application,start_boot,[idna,permanent]}},
     {apply,{application,start_boot,[metrics,permanent]}},
     {apply,{application,start_boot,[mimerl,permanent]}},
     {apply,{application,start_boot,[syntax_tools,permanent]}},
     {apply,{application,start_boot,[parse_trans,permanent]}},
     {apply,{application,start_boot,[public_key,permanent]}},
     {apply,{application,start_boot,[ssl,permanent]}},
     {apply,{application,start_boot,[ssl_verify_fun,permanent]}},
     {apply,{application,start_boot,[hackney,permanent]}},
     {apply,{application,start_boot,[httpoison,permanent]}},
     {apply,{application,start_boot,[jason,permanent]}},
     {apply,{application,start_boot,[phoenix_pubsub,permanent]}},
     {apply,{application,start_boot,[phoenix,permanent]}},
     {apply,{application,start_boot,[cowlib,permanent]}},
     {apply,{application,start_boot,[ranch,permanent]}},
     {apply,{application,start_boot,[cowboy,permanent]}},
     {apply,{application,start_boot,[cowboy_telemetry,permanent]}},
     {apply,{application,start_boot,[plug_cowboy,permanent]}},
     {apply,{application,start_boot,[poison,permanent]}},
     {apply,{application,start_boot,[runtime_tools,permanent]}},
     {apply,{application,start_boot,[telemetry_metrics,permanent]}},
     {apply,{application,start_boot,[telemetry_poller,permanent]}},
     {apply,{application,start_boot,[teamcowboygraphql,permanent]}},
     {progress,started}]}.
